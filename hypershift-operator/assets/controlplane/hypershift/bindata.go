// Code generated by go-bindata. DO NOT EDIT.
// sources:
// hypershift-operator/assets/controlplane/hypershift/apiserver-haproxy/apiserver-ip.service (299B)
// hypershift-operator/assets/controlplane/hypershift/apiserver-haproxy/haproxy.cfg (393B)
// hypershift-operator/assets/controlplane/hypershift/apiserver-haproxy/kube-apiserver-proxy.yaml (709B)
// hypershift-operator/assets/controlplane/hypershift/apiserver-haproxy/setup-apiserver-ip.sh (206B)
// hypershift-operator/assets/controlplane/hypershift/apiserver-haproxy/teardown-apiserver-ip.sh (168B)
// hypershift-operator/assets/controlplane/hypershift/cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml (245B)
// hypershift-operator/assets/controlplane/hypershift/common/service-network-admin-kubeconfig-secret.yaml (137B)
// hypershift-operator/assets/controlplane/hypershift/control-plane-operator/cp-operator-configmap.yaml (137B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-cluster-crd.yaml (444B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-cluster.yaml (265B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-operator-cluster-role-binding.yaml (277B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-operator-cluster-role.yaml (651B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-operator.yaml (825B)
// hypershift-operator/assets/controlplane/hypershift/etcd/etcd-secret-template.yaml (220B)
// hypershift-operator/assets/controlplane/hypershift/hypershift-operator/hypershift-operator-configmap.yaml (134B)
// hypershift-operator/assets/controlplane/hypershift/ignition-configs/20-apiserver-haproxy.yaml (1.335kB)
// hypershift-operator/assets/controlplane/hypershift/ignition-configs/99-worker-ssh.yaml (321B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/client.conf (139B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/kube-apiserver-configmap.yaml (380B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/kube-apiserver-deployment-patch.yaml (971B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/kube-apiserver-secret.yaml (592B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/kube-apiserver-vpnclient-config.yaml (150B)
// hypershift-operator/assets/controlplane/hypershift/kube-apiserver/kube-apiserver-vpnclient-secret.yaml (235B)
// hypershift-operator/assets/controlplane/hypershift/kube-controller-manager/kube-controller-manager-configmap.yaml (194B)
// hypershift-operator/assets/controlplane/hypershift/kube-controller-manager/kube-controller-manager-secret.yaml (289B)
// hypershift-operator/assets/controlplane/hypershift/kube-scheduler/kube-scheduler-secret.yaml (119B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/cluster-infrastructure-02-config.yaml (551B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/cluster-network-02-config.yaml (258B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/cluster-proxy-01-config.yaml (116B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/install-config.yaml (103B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/machine-config-server-configmap.yaml (901B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/machine-config-server-deployment.yaml (5.655kB)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/machine-config-server-kubeconfig-secret.yaml (153B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/machine-config-server-secret.yaml (185B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/machine-config-server-service.yaml (212B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/master.machineconfigpool.yaml (344B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/pull-secret.yaml (175B)
// hypershift-operator/assets/controlplane/hypershift/machine-config-server/worker.machineconfigpool.yaml (418B)
// hypershift-operator/assets/controlplane/hypershift/oauth-openshift/ingress-certs-secret.yaml (194B)
// hypershift-operator/assets/controlplane/hypershift/oauth-openshift/oauth-server-configmap.yaml (122B)
// hypershift-operator/assets/controlplane/hypershift/oauth-openshift/oauth-server-secret.yaml (216B)
// hypershift-operator/assets/controlplane/hypershift/openshift-apiserver/openshift-apiserver-configmap.yaml (248B)
// hypershift-operator/assets/controlplane/hypershift/openshift-apiserver/openshift-apiserver-secret.yaml (332B)
// hypershift-operator/assets/controlplane/hypershift/openshift-controller-manager/openshift-controller-manager-configmap.yaml (140B)
// hypershift-operator/assets/controlplane/hypershift/openshift-controller-manager/openshift-controller-manager-secret.yaml (265B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/Dockerfile (212B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/client.conf (155B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-ccd-configmap.yaml (113B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-client-configmap.yaml (151B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-client-deployment.yaml (1.67kB)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-client-secret.yaml (364B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-server-configmap.yaml (126B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-server-deployment.yaml (1.61kB)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-server-secret.yaml (225B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-server-service.yaml (221B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/openvpn-serviceaccount.yaml (58B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/server.conf (805B)
// hypershift-operator/assets/controlplane/hypershift/openvpn/worker (108B)
// hypershift-operator/assets/controlplane/hypershift/registry/cluster-imageregistry-config.yaml (542B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/client.conf (139B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/haproxy.cfg (515B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-configmap.yaml (136B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-deployment.yaml (2.659kB)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-http-service.yaml (175B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-https-service.yaml (179B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-vpnclient-configmap.yaml (146B)
// hypershift-operator/assets/controlplane/hypershift/router-proxy/router-proxy-vpnclient-secret.yaml (229B)
// hypershift-operator/assets/controlplane/hypershift/user-manifests-bootstrapper/user-manifest-template.yaml (104B)
// hypershift-operator/assets/controlplane/hypershift/user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml (2.918kB)

package hypershift

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiserverHaproxyApiserverIpService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x5e\x20\xcd\x13\xdc\x50\x44\x87\x6e\x15\x05\x31\x44\x19\x8e\xf4\x83\x5a\x5c\xed\xc3\xf6\xb5\xc9\xdb\x23\x05\x58\x40\xcc\xfe\x5b\xfa\x7d\xc3\x13\x93\x8f\xe1\x1e\x36\x29\x55\x27\xe1\x74\x84\x5b\x6c\x35\x16\x99\x72\x89\xfb\x43\x74\x89\x55\x65\x5e\xe2\xf6\xb0\x8f\x06\xbd\x42\xa3\xe2\xa3\xc1\xdc\xc2\x73\x66\xb7\xc4\xf0\x9b\xe8\x7b\x27\x5c\x88\xb1\xf1\xac\x6f\xf0\xb0\x7d\x75\xe8\x3f\xb7\x30\x1c\xa1\x57\x9a\x30\x86\xc7\xa5\x22\x09\xc3\xce\xe2\x61\x37\x63\x3a\x7a\x56\x4f\x7d\x33\xed\x57\x44\xff\x42\xdc\x1b\xbc\xd5\x2e\x57\xfa\x12\x74\x54\x37\x76\xfe\xce\xa5\xfe\xae\x1d\x59\x4f\x72\xe3\x3f\x0f\x0f\xb8\x64\xe2\x55\xb6\x9b\xc9\xd3\x02\x0b\x61\xd8\xb3\x79\x2e\x65\x5c\xe7\xe0\x74\xb7\xa4\x4b\x2b\x4e\x5d\x33\xe8\x8f\xf8\x33\x00\x00\xff\xff\x32\xd9\xd2\xb7\x2b\x01\x00\x00")

func apiserverHaproxyApiserverIpServiceBytes() ([]byte, error) {
	return bindataRead(
		_apiserverHaproxyApiserverIpService,
		"apiserver-haproxy/apiserver-ip.service",
	)
}

func apiserverHaproxyApiserverIpService() (*asset, error) {
	bytes, err := apiserverHaproxyApiserverIpServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/apiserver-ip.service", size: 299, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x13, 0xe4, 0xd, 0xed, 0xb2, 0xc7, 0xc3, 0xa2, 0x2e, 0x26, 0xfc, 0xdb, 0xdb, 0x8a, 0x24, 0x4b, 0xe5, 0x6c, 0x7a, 0xb2, 0x90, 0xcc, 0x68, 0x15, 0x85, 0xf2, 0x63, 0xa3, 0xd2, 0x2e, 0x33}}
	return a, nil
}

var _apiserverHaproxyHaproxyCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x4a\xc3\x40\x10\x86\xef\xf3\x14\xff\x0b\x28\x91\x56\x05\x6f\x05\x3d\x78\x29\x05\x1f\xa0\x6c\x76\x27\xb2\xb8\x99\x89\xb3\x13\x29\x94\xbc\xbb\x84\xf6\x50\x13\xbc\x7e\xff\xce\xf7\xf3\xef\x67\xd1\x36\x14\x02\xfa\x70\x8a\x2a\x82\xe7\xa6\x69\x88\x12\x77\x61\x2c\x5e\xe7\x40\x13\xc3\xe3\x40\x80\xe7\x9e\x75\x74\xc4\x92\x59\x1c\x0f\x4d\x7f\x03\x2b\xdb\x0f\xdb\x02\xce\x4a\x8e\xf3\xd3\xba\xba\xbf\xeb\xb2\xe0\xb1\xae\x14\x6b\xfe\x3d\xf2\xc8\x17\x64\xec\x96\xb9\x62\x43\xd4\x99\x8a\xb3\x24\x14\x8d\xa1\x1c\xc3\x90\x2f\xf7\x04\xb4\x59\x12\xce\x67\xdc\xbf\x9d\x9c\x4d\x42\xd9\x1d\xde\x77\x29\x19\xd7\x8a\x69\x7a\x79\xda\x6e\x37\x04\x5c\x47\x1e\xdb\x10\xbf\x66\x8f\x71\xaf\xce\x37\x22\xfa\x37\xf9\xf3\x2d\xd7\xe5\x51\xc5\x4d\xcb\x50\x82\xf0\xb2\xfc\x75\xff\xb1\x0f\x3d\xcf\xe5\x8b\xe4\xa0\xe6\x98\x26\xfa\x0d\x00\x00\xff\xff\xf2\x2f\x88\xa6\x89\x01\x00\x00")

func apiserverHaproxyHaproxyCfgBytes() ([]byte, error) {
	return bindataRead(
		_apiserverHaproxyHaproxyCfg,
		"apiserver-haproxy/haproxy.cfg",
	)
}

func apiserverHaproxyHaproxyCfg() (*asset, error) {
	bytes, err := apiserverHaproxyHaproxyCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/haproxy.cfg", size: 393, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0xdb, 0xc3, 0xeb, 0x29, 0xc6, 0x87, 0x51, 0x7a, 0xd0, 0xf7, 0xc8, 0xdc, 0xe3, 0xe5, 0xc3, 0xc9, 0x9f, 0x6c, 0xe4, 0x4b, 0x60, 0xeb, 0x5d, 0xa7, 0x3, 0x4d, 0x97, 0x6a, 0x5c, 0xe9, 0xc1}}
	return a, nil
}

var _apiserverHaproxyKubeApiserverProxyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x43\xee\x8e\xbb\x6d\x08\x45\xb7\x40\x5b\xe8\xa1\x65\x21\xa5\xf7\x59\x79\x76\x2d\x2c\x6b\xcc\xcc\x68\x9b\x25\xe4\xbf\x17\xdb\x52\x49\x4a\xf6\x64\xc1\x7b\xfe\xde\xd3\x68\x70\x0e\xbf\x49\x34\x70\x72\x70\xde\x35\x63\x48\xbd\x83\x3d\xf7\xcd\x44\x86\x3d\x1a\xba\x06\x20\xe1\x44\x0e\xc6\x7c\xa0\x16\xe7\xa0\x24\x67\x92\x76\x16\x7e\xba\x14\x51\x67\xf4\xd5\xa1\x17\x35\x9a\x1a\x80\x88\x07\x8a\xba\xfc\x0f\x30\x7e\xd6\x16\xe7\xf9\x0a\x44\x67\xf2\x8b\x6f\x60\xb5\x9f\x64\x7f\x58\x46\x07\x26\x99\x1a\x00\xcf\xc9\x30\x24\x92\x95\xd4\x96\x2e\x03\xd6\x78\x80\x30\xe1\x89\x1c\x3c\x3f\x6f\xa7\x6f\x2c\x70\x53\xf4\x56\x38\x1b\xc9\x0d\xbc\xbc\xac\xd6\x18\xce\x94\x48\x75\x2f\x7c\xa0\xad\x19\xc0\x11\x43\xcc\x42\xbf\x06\x21\x1d\x38\xf6\x0e\x3e\x15\x25\xa4\x60\x01\xe3\x17\x8a\x78\x79\x24\xcf\xa9\x57\x07\xbb\x8f\x1f\x8a\x3c\x93\x04\xee\xdf\x11\x34\x7b\x4f\xaa\xaf\x88\xbb\xa2\x98\x9f\x1f\xd9\x8f\x64\x35\x7c\xbb\xf4\xda\xfe\xf6\xeb\x93\x91\x24\x8c\x0f\xfb\xef\x0f\x7d\x2f\xa4\x5a\x7b\xaf\x69\x2c\xe6\xe0\xfe\xee\xae\xb6\xb3\x30\x11\x67\xfb\x97\x7f\xbf\xc5\x7b\x9e\x26\x4c\xfd\x16\xd0\xbe\x99\x54\x0b\xed\xb1\x1c\xba\xac\xd2\x45\xf6\x18\x3b\x32\xdf\x15\x57\xfd\xde\xfa\xe3\x69\x35\x9e\x39\xe6\x89\x7e\x70\x4e\xa6\x95\xb8\xbd\x80\xe7\x74\x0c\xa7\x52\x65\x5a\x0c\x7b\xb4\xc1\x5d\x01\x37\x15\xf5\xe6\x15\x5f\x31\x96\x29\xac\x80\x3a\xdb\x0d\xb6\x20\x96\x95\x91\x44\x46\xda\xfd\xb7\x38\x6d\x01\xfc\x0d\x00\x00\xff\xff\xe4\xa9\xbd\xe5\xc5\x02\x00\x00")

func apiserverHaproxyKubeApiserverProxyYamlBytes() ([]byte, error) {
	return bindataRead(
		_apiserverHaproxyKubeApiserverProxyYaml,
		"apiserver-haproxy/kube-apiserver-proxy.yaml",
	)
}

func apiserverHaproxyKubeApiserverProxyYaml() (*asset, error) {
	bytes, err := apiserverHaproxyKubeApiserverProxyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/kube-apiserver-proxy.yaml", size: 709, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x90, 0xf, 0x60, 0xe8, 0xab, 0xc9, 0x82, 0x4, 0xeb, 0x2d, 0x10, 0x6c, 0xc7, 0xa3, 0x65, 0xaa, 0xa9, 0xf3, 0x24, 0x4e, 0x5d, 0xf5, 0x46, 0x80, 0xa5, 0x5a, 0xa3, 0xc6, 0x28, 0x55, 0xa9}}
	return a, nil
}

var _apiserverHaproxySetupApiserverIpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcc\xb1\x0a\xc2\x30\x14\x85\xe1\x3d\x4f\x71\xc4\x59\x03\xfa\x04\x1d\x1c\xdc\x7c\x85\xa4\xf7\x42\x83\x21\x29\xf7\xa4\xa5\x50\xfa\xee\x52\x74\x55\x97\x33\x9d\xff\x3b\x1e\xfc\x44\xf3\x31\x15\xaf\x65\x46\x0c\x1c\x1c\xb5\xe1\xb4\xb8\x34\x22\x88\xd8\x3e\x58\x57\x9c\x6f\x4b\x53\x2b\x21\x77\x8f\x7b\x27\x62\x4a\x62\xdb\xfc\xf5\x82\x68\x3f\x0e\x60\x5f\x47\xc5\x50\xd9\x20\x3a\x23\xd7\x1d\xb6\x3a\x35\xfd\x2f\xbf\x83\x0f\x91\x53\x79\x82\xd6\x7f\x4f\xdc\x2b\x00\x00\xff\xff\xb0\xca\xae\x34\xce\x00\x00\x00")

func apiserverHaproxySetupApiserverIpShBytes() ([]byte, error) {
	return bindataRead(
		_apiserverHaproxySetupApiserverIpSh,
		"apiserver-haproxy/setup-apiserver-ip.sh",
	)
}

func apiserverHaproxySetupApiserverIpSh() (*asset, error) {
	bytes, err := apiserverHaproxySetupApiserverIpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/setup-apiserver-ip.sh", size: 206, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x2e, 0x65, 0xf8, 0xa0, 0x2a, 0xc1, 0x78, 0xbd, 0x8f, 0x6f, 0xba, 0xec, 0x27, 0x3, 0x63, 0xd0, 0x4e, 0x11, 0xb2, 0x51, 0x9, 0x61, 0x5a, 0x4, 0x22, 0xdc, 0x81, 0x37, 0x4c, 0xbb, 0x22}}
	return a, nil
}

var _apiserverHaproxyTeardownApiserverIpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\x7d\x4e\xf1\xc5\xb5\x06\xf4\x04\x5d\xb8\x70\xe7\x15\xd2\xce\x07\x83\x21\x29\x33\xd3\x52\x28\xbd\xbb\xe4\x00\x82\x07\x78\xe7\x53\x5c\x4c\xe3\x98\x6b\x64\x5d\x31\x26\x7b\x07\xa3\xe3\xb2\x85\x3c\x23\x89\x28\x84\x85\x4e\xec\x3b\xae\x8f\xcd\xa9\x35\x95\xe1\xf5\x1c\x44\x94\x66\x38\x8e\x78\xbf\x41\xb8\xa2\xb4\x4e\xb4\x2d\xce\x6e\xfe\x01\xb0\xa9\xcd\x44\xc9\xf5\x03\xd3\xe9\x37\x09\xdf\x00\x00\x00\xff\xff\xb0\xf6\xbc\x12\xa8\x00\x00\x00")

func apiserverHaproxyTeardownApiserverIpShBytes() ([]byte, error) {
	return bindataRead(
		_apiserverHaproxyTeardownApiserverIpSh,
		"apiserver-haproxy/teardown-apiserver-ip.sh",
	)
}

func apiserverHaproxyTeardownApiserverIpSh() (*asset, error) {
	bytes, err := apiserverHaproxyTeardownApiserverIpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/teardown-apiserver-ip.sh", size: 168, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x11, 0x2f, 0x73, 0xff, 0xc, 0x1f, 0xe0, 0x7a, 0x1f, 0xa2, 0x3a, 0x8, 0xd6, 0x97, 0x5d, 0x32, 0xbc, 0x9c, 0xa0, 0xae, 0x95, 0x87, 0x49, 0x42, 0xd7, 0x20, 0xe6, 0xf8, 0x7b, 0x42, 0xb6}}
	return a, nil
}

var _clusterBootstrapClusterIngresscontrollers02ConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x6a\xc3\x40\x0c\x44\xef\xfb\x15\xfa\x81\xa4\xf4\xba\xd7\x9c\x7a\x0b\x14\x7a\x57\xed\xb1\x23\xea\x68\x17\x69\x1c\x08\xa5\xff\x5e\x52\xd7\x85\x1e\x85\x66\xde\x1b\xed\xf6\x86\x48\x6b\x5e\xa5\x75\x84\xb2\xc5\xb1\x75\x78\x5e\x6c\xe2\xd1\xda\xd3\xed\xb9\x7c\x98\x8f\x55\x5e\x7c\x0e\x64\x9e\x9a\x33\xda\xb2\x20\xca\x15\xd4\x51\xa9\xb5\x88\xb8\x5e\x51\x65\xc4\xa4\xeb\xc2\xdf\x3b\xbb\x0e\xf8\xe1\x6e\xb8\x83\x6d\x88\xc3\x6e\x2a\xd9\x31\x3c\xda\xf0\xb1\x37\x73\x9e\xd7\xf7\xc5\xf2\x62\x3e\xbf\x32\x94\x98\xef\x8f\xaf\x08\xef\x1d\x55\xce\x61\x37\x25\x8a\xec\x9e\x13\x82\x36\xd9\xa0\xc4\x96\xfb\xb7\xe2\x4f\x37\x20\x58\x92\xca\x35\xab\x7c\x7e\x95\xef\x00\x00\x00\xff\xff\x82\x4d\x42\x7f\xf5\x00\x00\x00")

func clusterBootstrapClusterIngresscontrollers02ConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBootstrapClusterIngresscontrollers02ConfigYaml,
		"cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml",
	)
}

func clusterBootstrapClusterIngresscontrollers02ConfigYaml() (*asset, error) {
	bytes, err := clusterBootstrapClusterIngresscontrollers02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml", size: 245, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x20, 0x83, 0x3b, 0xbf, 0xa, 0x27, 0xb7, 0x78, 0xf8, 0xc0, 0x28, 0xbf, 0x4c, 0x6c, 0xb, 0xa9, 0x4a, 0x1f, 0xf3, 0xaf, 0x4a, 0x2b, 0xba, 0xf9, 0x13, 0x60, 0x79, 0x2e, 0x8e, 0x29, 0x65}}
	return a, nil
}

var _commonServiceNetworkAdminKubeconfigSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\x31\x0e\xc2\x30\x0c\x46\xe1\x3d\xa7\xb0\xba\x07\x89\xd5\xd7\x40\x62\x37\xc9\x0f\xb2\x42\x9c\xca\x35\x65\xa8\x7a\x77\x06\x54\x75\x7d\xfa\x9e\xcc\x7a\x87\x2f\x3a\x8c\x69\xbd\xa6\xa6\x56\x99\x6e\x28\x8e\x48\x1d\x21\x55\x42\x38\x11\x99\x74\x30\x2d\xf0\x55\x0b\xb2\x21\xbe\xc3\x5b\x96\xda\xd5\x72\xfb\x3c\x50\x86\x3d\xf5\x95\x0e\x7e\x26\xa6\x6d\xa3\xb9\x29\x4d\x6a\x01\x37\x79\xff\xaf\xcb\x49\x26\xda\xf7\xf4\x0b\x00\x00\xff\xff\x8e\xbf\x6e\xb1\x89\x00\x00\x00")

func commonServiceNetworkAdminKubeconfigSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_commonServiceNetworkAdminKubeconfigSecretYaml,
		"common/service-network-admin-kubeconfig-secret.yaml",
	)
}

func commonServiceNetworkAdminKubeconfigSecretYaml() (*asset, error) {
	bytes, err := commonServiceNetworkAdminKubeconfigSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/service-network-admin-kubeconfig-secret.yaml", size: 137, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x0, 0x76, 0xf4, 0xa7, 0xd4, 0x99, 0x5a, 0xec, 0x58, 0xf9, 0x3a, 0xe2, 0x72, 0xd, 0x93, 0xd8, 0x5, 0x5f, 0xf2, 0x27, 0x2e, 0xbe, 0xe8, 0xc1, 0x72, 0xb9, 0x26, 0x57, 0xea, 0xc4, 0x40}}
	return a, nil
}

var _controlPlaneOperatorCpOperatorConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xa1\xce\x02\x31\x0c\x07\x70\xdf\xa7\xf8\xe7\xfc\xbe\xe4\x4b\x50\xb3\x68\x2c\x96\x94\xad\x90\xe6\xb6\x76\x19\x05\x73\xdc\xbb\x63\xc0\xff\x78\xe8\x59\xe6\x43\xdd\x32\x5e\xff\xb4\xaa\xd5\x8c\xa3\xdb\x4d\xef\x27\x1e\xd4\x25\xb8\x72\x70\x26\xc0\xb8\x4b\x46\x71\x8b\xe9\x2d\x8d\xc6\x26\xc9\x87\x4c\x0e\x9f\xf4\x43\x6a\x1a\xca\x2d\x15\xfe\x2b\x33\x32\xde\xb4\x6d\x50\x2b\xed\x59\xe5\x32\x56\xc5\x52\xbc\x5f\xd5\xa4\x7e\xc9\x02\x1c\xb0\xef\xf4\x09\x00\x00\xff\xff\x72\xad\x7e\xc6\x89\x00\x00\x00")

func controlPlaneOperatorCpOperatorConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_controlPlaneOperatorCpOperatorConfigmapYaml,
		"control-plane-operator/cp-operator-configmap.yaml",
	)
}

func controlPlaneOperatorCpOperatorConfigmapYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-configmap.yaml", size: 137, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x19, 0x62, 0xb0, 0xae, 0x52, 0xc0, 0xf3, 0xd4, 0x65, 0xe5, 0xde, 0xad, 0x16, 0x7c, 0xa7, 0x78, 0x49, 0x89, 0x97, 0x6d, 0xa4, 0x37, 0xe7, 0xd3, 0xa3, 0x92, 0xc, 0x4b, 0xd3, 0x7, 0xcb}}
	return a, nil
}

var _etcdEtcdClusterCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\x5f\x20\xfa\x91\x7f\x2a\xb4\xa6\x9d\x5a\x64\xe8\xd0\x9d\x91\x59\x97\x88\x2d\x0a\x24\x15\xb4\x6f\x5f\xd8\x72\x61\xa4\xe8\x48\x1e\xef\xf4\xe9\xb0\xf2\x1b\xa9\xb1\x94\x04\x58\x99\x3e\x9d\xca\x32\x59\xbc\x3e\x58\x64\xf9\x77\x3b\x5e\xc8\xf1\x18\xae\x5c\x86\x04\xa7\x66\x2e\xf3\x2b\x99\x34\xcd\xf4\x48\xef\x5c\xd8\x59\x4a\x98\xc9\x71\x40\xc7\x14\x00\x0a\xce\x94\x80\x3c\x0f\x79\x6a\xe6\xa4\x16\x97\x21\x2e\xfa\x05\x8d\x62\x16\x25\xb1\x98\x65\x0e\x56\x29\x2f\x9e\x2c\xe5\xb6\x71\x04\x00\x00\x73\x45\xa7\xf1\x2b\xc1\x59\x0a\x05\x80\x51\xa5\xd5\x9e\xfa\x67\x50\x7f\xd6\xba\xbb\xc3\x3e\x79\x1e\x4e\x9d\x60\xdd\x4e\x6c\xfe\xfc\x5b\x79\x61\xf3\x55\xad\x53\x53\x9c\xee\xb9\x3b\xca\x87\xa8\x9f\xf7\xf0\xc3\x7a\xd2\x25\x2e\x63\x9b\x50\xef\x5c\x01\xc0\xb2\x54\x4a\xb0\x9a\x2a\x66\x5a\xae\x7f\xbe\x07\xbd\xd1\xff\xfb\x6a\xcd\x3d\x6c\xb5\xed\x2a\x80\x91\xde\x68\x48\xe0\xda\x68\x6b\x45\x14\x47\xda\x36\xdf\x01\x00\x00\xff\xff\x99\xa0\xbc\xf0\xbc\x01\x00\x00")

func etcdEtcdClusterCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdClusterCrdYaml,
		"etcd/etcd-cluster-crd.yaml",
	)
}

func etcdEtcdClusterCrdYaml() (*asset, error) {
	bytes, err := etcdEtcdClusterCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-cluster-crd.yaml", size: 444, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x93, 0x34, 0xc, 0x9, 0xb9, 0xc7, 0x3, 0x46, 0x2c, 0x53, 0x30, 0x38, 0x86, 0xce, 0x84, 0x56, 0x5b, 0xa2, 0xf8, 0xfb, 0x25, 0xec, 0xb0, 0x19, 0x8, 0x76, 0x5d, 0x11, 0x39, 0x8b, 0x17}}
	return a, nil
}

var _etcdEtcdClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x3f\x4f\x03\x31\x0c\x05\xf0\x3d\x9f\xc2\xea\xde\xa0\x6b\xb7\x5b\x11\x1b\x5b\x11\xbb\xcf\x79\x43\xc4\xe5\x8f\x6c\x73\x03\x9f\x1e\x85\xa8\x08\xba\xd9\x4f\x3f\x3f\x73\xcf\xef\x50\xcb\xad\xae\x04\x97\x14\x13\x3b\x6f\x6c\x88\xd2\x14\xcd\xa2\xb4\xf2\x74\x2c\x1b\x9c\x2f\xe1\x23\xd7\xb4\xd2\x8b\x4b\x7a\xde\x3f\xcd\xa1\xa1\xc0\x79\x5c\xac\x81\xa8\x72\xc1\x2c\x09\xd6\x21\x23\xb2\xfc\x85\x95\x96\x40\x74\xdc\x9f\x9c\xae\xf1\x12\x97\xeb\x29\x10\xbd\xbd\xde\x06\x22\x32\x67\xcf\x32\x67\xa2\x82\xb2\x41\xef\x1b\x51\x07\xf4\x06\x51\xf8\x6c\x3f\x8f\xe0\xec\xbb\xfd\x0a\x83\x1e\x0f\x66\x46\x7f\x54\xeb\x50\xf6\xf6\x5f\xc9\x9e\x51\xfd\x47\x7d\x07\x00\x00\xff\xff\xd6\x50\xc7\x57\x09\x01\x00\x00")

func etcdEtcdClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdClusterYaml,
		"etcd/etcd-cluster.yaml",
	)
}

func etcdEtcdClusterYaml() (*asset, error) {
	bytes, err := etcdEtcdClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-cluster.yaml", size: 265, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0xba, 0x60, 0x3a, 0x37, 0x96, 0x38, 0x15, 0xbd, 0x24, 0xf8, 0x69, 0xef, 0xfc, 0x88, 0x4c, 0xcd, 0x43, 0xd7, 0xe6, 0xfe, 0x16, 0xd8, 0xe9, 0xaa, 0x8, 0x45, 0x73, 0x26, 0x6b, 0x15, 0x30}}
	return a, nil
}

var _etcdEtcdOperatorClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xfe\x40\x8c\xd2\x21\x77\x40\x41\x47\x11\x24\xfa\x8d\xbd\xc0\x92\xc4\x6b\xad\xd7\x29\x88\xf2\xef\xa7\xd3\xdd\x55\xa7\x5c\x39\x33\x7a\xf3\xb0\xf0\x17\x69\x65\xc9\x01\x74\xc4\xe8\xb1\xd9\xaf\x28\xff\xa3\xb1\x64\x3f\x3d\x57\xcf\xf2\xb4\xf6\x23\x19\xf6\x6e\xe2\x9c\x02\xbc\xcd\xad\x1a\xe9\x20\x33\xbd\x72\x4e\x9c\x7f\xdc\x42\x86\x09\x0d\x83\x03\xc8\xb8\x50\x00\xb2\x98\x3a\x29\xa4\x68\xa2\x4e\x65\xa6\x81\xbe\xcf\x33\x16\x7e\x57\x69\xe5\x81\xcf\x01\xdc\x99\x0e\x8e\x6b\x1b\xff\x28\x5a\x0d\xae\xbb\x32\x9f\xa4\x2b\x47\x7a\x89\x51\x5a\xb6\x03\xec\xd2\xd6\x82\x91\x02\x6c\x1b\xf8\x8f\x5b\x84\x7d\x77\xa7\x00\x00\x00\xff\xff\x68\xf2\xac\x10\x15\x01\x00\x00")

func etcdEtcdOperatorClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdOperatorClusterRoleBindingYaml,
		"etcd/etcd-operator-cluster-role-binding.yaml",
	)
}

func etcdEtcdOperatorClusterRoleBindingYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator-cluster-role-binding.yaml", size: 277, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x8, 0xef, 0xaa, 0xbf, 0xd, 0x2b, 0x81, 0x6c, 0x9, 0xfa, 0xc, 0x13, 0x90, 0x98, 0xae, 0x2, 0x59, 0x14, 0x3b, 0x1d, 0x91, 0x77, 0x3, 0xd0, 0x70, 0x40, 0xcd, 0x30, 0xd6, 0x4c, 0xee}}
	return a, nil
}

var _etcdEtcdOperatorClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbd\x6e\xdc\x40\x0c\x84\x7b\x3d\x05\x71\xe9\x02\x9c\x02\x23\x4d\xa0\x36\x45\x9a\x54\xb1\x91\x9e\xda\x9d\xb3\x89\xd3\x2e\x17\x24\x57\xf9\x79\xfa\x40\xa7\xcb\x0f\x7c\x01\xec\x92\xc4\x47\xce\x70\xc8\x4d\xbe\xc2\x5c\xb4\x4e\x64\x33\xa7\x91\x7b\x3c\xa9\xc9\x4f\x0e\xd1\x3a\x9e\x3f\xf8\x28\xfa\x6e\xbd\x9b\x11\x7c\x37\x9c\xa5\xe6\x89\x3e\x2e\xdd\x03\xf6\x45\x17\x0c\x05\xc1\x99\x83\xa7\x81\xa8\x72\xc1\x44\x88\x94\x8f\xda\x60\x1c\x6a\x83\xf5\x05\x3e\x0d\x47\xe2\x26\x9f\x4c\x7b\xf3\x8d\x3c\x5e\xa8\x71\x1b\x9c\xd9\x31\x26\x35\xa8\x8f\x49\xcb\x40\x64\x70\xed\x96\xf0\x0f\x99\x76\x45\xff\xd3\x98\x39\x9d\x7b\xfb\x5b\x1b\x3c\xd4\xb0\x35\x56\xd8\x7c\x1d\x3d\xbc\x3d\xdc\x2a\x73\x13\x7c\x0f\xd4\xed\x66\xbf\x1e\x78\xab\x9a\xba\x87\x96\xdf\xcd\x8c\x93\x54\xd9\x12\x79\x8d\xc2\xe1\x70\xbb\xaf\x69\xde\xdd\x3a\x6c\x95\x84\xab\xf5\x9a\x9b\x4a\x8d\xbd\x6a\xdb\x23\x3c\x50\x63\xd5\xa5\x17\xa4\x85\xa5\x5c\xc1\x15\x3b\xf5\xf2\x75\x97\x54\x9e\xa9\x67\xb4\x45\x7f\x94\xff\xef\x78\x43\x0f\x4f\xa0\x93\x2e\x8b\x7e\x93\xfa\xb8\xd9\x28\xe2\x97\x78\x28\x71\xa5\x19\x64\x28\xba\x22\x93\x9c\xa8\x6a\x50\xf7\x8d\xbb\x7f\x4f\xfb\x1b\x88\x6b\xa6\x87\xcf\xf7\xaf\x4b\xc2\x91\x0c\xcf\x7d\x3c\x22\x86\x5f\x01\x00\x00\xff\xff\x57\xc2\xf0\x2f\x8b\x02\x00\x00")

func etcdEtcdOperatorClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdOperatorClusterRoleYaml,
		"etcd/etcd-operator-cluster-role.yaml",
	)
}

func etcdEtcdOperatorClusterRoleYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator-cluster-role.yaml", size: 651, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x9e, 0x1b, 0x8, 0x5b, 0xe6, 0xf2, 0x28, 0x3f, 0xb4, 0xb7, 0x37, 0xdc, 0x10, 0x4f, 0xab, 0x3c, 0x48, 0x1a, 0xd2, 0xcf, 0xbb, 0x8, 0xc9, 0x45, 0x9a, 0xa7, 0xe8, 0x48, 0xab, 0x58, 0xcb}}
	return a, nil
}

var _etcdEtcdOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\x23\xee\x09\x45\xea\xa5\xbe\x45\x85\x9e\x0a\x45\x20\x55\xea\x09\x4d\x9d\x49\xb1\x6a\x7b\x5c\x7b\x88\x84\x22\xfe\x7b\x95\x0d\x64\x13\x04\xab\x3d\xec\x9c\xa2\xe7\x79\xdf\x9b\xc9\xe4\x79\x9e\x61\x30\x3f\x29\x26\xc3\x5e\x41\xb3\xc8\xfe\x1a\x5f\x29\xd8\x53\x6c\x8c\xa6\x52\x6b\x3e\x79\xc9\x1c\x09\x56\x28\xa8\x32\x00\x8f\x8e\x14\x90\xe8\x2a\xe7\x40\x11\x85\x63\x76\xcf\xc1\x10\xd2\x7c\x80\x2d\x29\x58\x3e\x3b\x7a\x07\x28\x05\xd2\xdd\x5b\xa4\x60\x8d\xc6\xa4\x60\x91\x01\x24\xb2\xa4\x85\x63\xf7\x02\xe0\x50\xf4\xf1\x3b\xfe\x26\x9b\x7a\xe1\x31\x0a\x40\xc8\x05\x8b\x42\x57\xdb\x28\xba\x2b\x3b\x21\x3c\x66\xb4\x2d\x98\x1a\x8a\x1d\x25\xc1\x28\x4b\x14\x82\xcb\xe5\xea\x40\xef\x59\x50\x0c\xfb\x11\x84\x03\xf9\x74\x34\xb5\x14\x86\xe7\xb1\xb7\x51\x55\x8a\x82\x59\xdb\xde\x83\x66\x1d\x9f\x7c\x75\x63\xde\x96\x7f\xf9\x9e\x1c\x60\xf3\x70\xbf\xae\x34\x7b\x41\xe3\x29\x0e\x43\xe4\x4f\xfe\x46\x5f\xc6\xe1\x1f\x52\xf0\xef\x84\xe7\x6e\x44\xcd\x91\x38\xcd\x27\xbd\xaa\xf9\x54\x7c\x29\x3e\x0f\x16\xcd\xce\xa1\xaf\x5e\x97\xcc\x9f\xb0\xc9\x37\xe3\xa6\x7e\x8c\xf5\xaf\xc3\xf6\xc7\xf2\xb0\x29\xd7\xab\xfd\xb6\xfc\xba\x1a\x1a\x00\x1a\xb4\x27\xfa\x16\xd9\xa9\x91\x08\x50\x1b\xb2\xd5\x8e\xea\xa9\x7a\xd5\xb7\x28\x47\x35\xdc\xb2\xe8\x32\x52\x40\x4d\x6f\xe5\x7e\x7c\x64\xf6\x3f\x00\x00\xff\xff\x3d\x1e\xa7\x0c\x39\x03\x00\x00")

func etcdEtcdOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdOperatorYaml,
		"etcd/etcd-operator.yaml",
	)
}

func etcdEtcdOperatorYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator.yaml", size: 825, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0x6d, 0x50, 0x49, 0x1, 0xe5, 0x7a, 0x39, 0x9b, 0x38, 0xb2, 0x62, 0x65, 0x1c, 0x1d, 0x21, 0x98, 0x82, 0x55, 0x7, 0xb0, 0x18, 0x42, 0x80, 0xcb, 0xd4, 0x3d, 0x57, 0x55, 0xb2, 0x4d, 0x3e}}
	return a, nil
}

var _etcdEtcdSecretTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcd\x31\x0a\xc3\x30\x0c\x05\xd0\xdd\xa7\x10\x9e\xda\x21\x81\xae\xbe\x46\xa1\xbb\x70\x54\x10\x4e\x6c\x23\x8b\x42\x08\xba\x7b\x71\x48\x87\xd2\x66\xfd\xff\x3f\x29\x71\x9e\x02\xdc\x29\x0a\xa9\xc3\xca\x0f\x92\xc6\x25\x07\x78\xdd\xdc\x42\x8a\x13\x2a\x06\x07\x90\x71\xa1\x00\xdb\x06\xe3\x93\x67\x02\xb3\x41\xe7\xe6\x3e\x6d\xcf\xdb\x7e\x03\xcc\xc6\x28\xba\x4f\x6b\x62\xb8\x54\xe1\xac\x87\xf2\xbd\xf2\x57\x30\xfb\x31\x89\xd6\x33\x93\x68\xfd\x6b\x86\x88\x5f\xaf\xbc\x94\xa2\x47\xe8\xfb\xfe\x1d\x00\x00\xff\xff\xff\x43\x2d\xdd\xdc\x00\x00\x00")

func etcdEtcdSecretTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdEtcdSecretTemplateYaml,
		"etcd/etcd-secret-template.yaml",
	)
}

func etcdEtcdSecretTemplateYaml() (*asset, error) {
	bytes, err := etcdEtcdSecretTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-secret-template.yaml", size: 220, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x8b, 0xf9, 0x25, 0x6, 0xab, 0xaf, 0x22, 0x86, 0x63, 0xfb, 0x5d, 0x86, 0x68, 0x6b, 0xc0, 0xd6, 0xa7, 0x78, 0x5a, 0x7b, 0xd2, 0xf1, 0xb8, 0x59, 0x73, 0xe8, 0xe5, 0x71, 0x37, 0x7a, 0x1a}}
	return a, nil
}

var _hypershiftOperatorHypershiftOperatorConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xd3\xbd\x82\xe0\x94\xd5\xd9\xd5\x55\xce\xe4\x6a\x7f\xda\x5e\x42\x7a\x0a\x52\xfb\xee\x2e\xba\x7f\x52\x79\xd5\xb6\xb2\x58\xc4\xeb\x18\x26\x5a\x8e\x38\x17\x1b\xf8\xb8\x48\x0d\x8b\xba\x64\x71\x89\x01\x30\x59\x34\x62\x7c\x57\x6d\xeb\xc8\xc1\xfb\x52\xb5\x89\x97\x16\xfe\x82\x46\xa7\xcc\x7d\x92\x43\x6a\x1e\xf1\x09\xdb\x06\x5a\x9a\x9f\x59\x6f\x75\x22\xba\x54\x96\x3b\x4d\xf3\x8f\x74\xc0\x09\xfb\x1e\xbe\x01\x00\x00\xff\xff\x97\x3f\xba\x1f\x86\x00\x00\x00")

func hypershiftOperatorHypershiftOperatorConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_hypershiftOperatorHypershiftOperatorConfigmapYaml,
		"hypershift-operator/hypershift-operator-configmap.yaml",
	)
}

func hypershiftOperatorHypershiftOperatorConfigmapYaml() (*asset, error) {
	bytes, err := hypershiftOperatorHypershiftOperatorConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hypershift-operator/hypershift-operator-configmap.yaml", size: 134, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xc6, 0x61, 0x4f, 0x9f, 0xeb, 0xe5, 0x7b, 0xd7, 0x43, 0xe7, 0x24, 0xec, 0xdb, 0x12, 0x1a, 0xce, 0x8f, 0xc6, 0x4b, 0x56, 0x0, 0xe0, 0x70, 0x27, 0xc1, 0x43, 0xbb, 0xf1, 0x88, 0x28, 0x89}}
	return a, nil
}

var _ignitionConfigs20ApiserverHaproxyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x41\x8f\x9c\x30\x0c\x85\xef\xfc\x0a\x8b\x3b\x30\x3b\xda\x6d\xa5\x5c\xab\xde\xda\x4b\xa5\xf6\xee\x09\x66\xb0\x36\x38\x28\x31\xb4\x23\x3a\xff\xbd\x82\xec\xb0\xb4\xdd\x91\xda\xd1\xee\x31\x8e\xfd\xde\xfb\xac\x00\xf6\xfc\x8d\x42\x64\x2f\x06\x3a\xb4\x2d\x0b\x59\x2f\x0d\x1f\x87\x80\xca\x5e\x4a\xdf\x93\xc4\x96\x1b\x2d\xd9\x57\xe3\x5d\xf6\xc8\x52\x1b\xf8\x9c\x5a\x3f\x2c\xad\x59\x47\x8a\x35\x2a\x9a\x0c\x40\xb0\x23\x03\xfb\x5d\x81\x3d\x47\x0a\x23\x85\xa2\xc5\x3e\xf8\x1f\xa7\x0c\xc0\xe1\x81\x5c\x9c\xdb\xe0\x1f\xdc\x82\x77\x34\xa7\x8a\x4a\x21\x8b\x3d\xd9\x79\x30\xf5\x27\x09\x3e\x0a\xcf\x63\xe9\x04\x30\x5e\x48\xf6\xe5\xbe\xdc\x2d\xc5\xa8\x3e\xe0\x91\x2e\x1d\x0d\x3b\x8a\x97\x43\x91\x8e\xa7\xa8\xd4\x19\x08\xde\xeb\xd3\x05\x40\x8f\xda\x1a\xc8\xab\x21\x86\xca\x79\x8b\xae\x3a\xb0\x54\x91\x74\xe8\x37\x60\xdc\x97\xb1\xcd\xd7\x21\xeb\x45\x49\x74\xd5\x5f\xfc\xfd\x10\x2c\x19\xc8\xa7\x09\xe6\x15\x7d\xfd\xf2\xe9\xa3\x58\x5f\x13\xe4\x7f\x2d\xe8\x8a\x3e\x9c\xcf\xf9\x46\x71\xa4\xc0\x0d\xdb\x65\x5f\x06\xa6\xf3\x7a\xd5\xf9\x9a\x0c\xec\xde\x3f\x3c\xdc\xca\xa7\x84\xa1\xf6\xdf\xe5\x0d\x11\xaf\x5a\xbc\x25\x25\xa9\xad\x1e\x87\x03\x05\x21\xa5\x58\x3d\x5b\x2f\x99\x8a\xf4\xa4\xaa\xa7\x88\xa5\x6d\x8e\xaf\x08\xbc\x55\xfd\x4f\xc6\x77\xf7\xf7\x37\x33\x76\x28\xdc\x50\xd4\xb8\x14\x8b\x3f\x90\xcb\x13\x76\xee\x15\x21\xaf\x7b\xdc\x88\x9c\x50\xeb\x4b\xa0\x41\x58\x37\x9f\xed\x9a\x17\x7e\x16\xd9\x34\x01\x8b\x75\xc3\xcb\xc9\x7e\x7f\x66\x14\x46\xb6\x94\xc3\xdd\x0e\xce\xcf\xde\x24\x78\x70\x54\x1b\xd0\x30\xd0\x5a\x4d\x3f\xb2\xfc\x45\x81\xec\x57\x00\x00\x00\xff\xff\xcc\x34\xb4\x8f\x37\x05\x00\x00")

func ignitionConfigs20ApiserverHaproxyYamlBytes() ([]byte, error) {
	return bindataRead(
		_ignitionConfigs20ApiserverHaproxyYaml,
		"ignition-configs/20-apiserver-haproxy.yaml",
	)
}

func ignitionConfigs20ApiserverHaproxyYaml() (*asset, error) {
	bytes, err := ignitionConfigs20ApiserverHaproxyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-configs/20-apiserver-haproxy.yaml", size: 1335, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x7a, 0x56, 0xf8, 0xed, 0x31, 0x17, 0xd9, 0xf9, 0xc, 0x93, 0x7, 0x19, 0x1c, 0x93, 0xc4, 0x94, 0xd1, 0x2b, 0xab, 0x2c, 0x76, 0xc, 0x4e, 0x6e, 0x89, 0x3c, 0x82, 0x4b, 0xfd, 0x36, 0xdb}}
	return a, nil
}

var _ignitionConfigs99WorkerSshYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6f\xc2\x40\x0c\x85\xf7\xfb\x15\xfe\x03\xb9\xb6\x6c\x64\xab\xba\x54\x42\x9d\x90\xba\xbb\x89\xe1\x2c\x12\x3b\xb2\x2f\x20\x4a\xf9\xef\xd5\x71\x84\x99\xf1\x3d\x7f\xcf\x7e\xc6\x89\xbf\xc9\x9c\x55\x5a\x18\xb1\x4b\x2c\xd4\xa9\xec\x78\x3f\x1b\x66\x56\x89\x3a\x91\x78\xe2\x5d\x8e\xac\x2f\xc7\xb7\x70\x60\xe9\x5b\xf8\xaa\xe8\xc7\x0d\x0d\x23\x65\xec\x31\x63\x1b\x00\x04\x47\x6a\x61\xbd\x6e\x4e\x6a\x07\xb2\xc6\x3d\x05\x80\x01\x7f\x68\xf0\x32\x87\x27\xce\x98\x0e\x54\xea\x78\x26\x0b\x3e\x51\x57\x82\x95\xaf\x2b\x78\x2f\x5c\x62\x55\x01\x1c\x97\x17\x56\x71\x15\x5f\x6f\xe6\x84\xee\xa7\x7e\x01\x66\x27\xf3\x45\x34\xf7\x92\x9d\x1a\xdd\x2d\x00\xf7\xf4\x3e\xe7\xa4\xc6\xbf\xd4\x6f\xe8\xfc\xa0\x0b\xff\xd7\x3c\x04\xc0\xe5\x02\x71\xbb\xfd\xdc\xd0\x19\xae\xd7\xf0\x1f\x00\x00\xff\xff\x33\x16\x7f\x31\x41\x01\x00\x00")

func ignitionConfigs99WorkerSshYamlBytes() ([]byte, error) {
	return bindataRead(
		_ignitionConfigs99WorkerSshYaml,
		"ignition-configs/99-worker-ssh.yaml",
	)
}

func ignitionConfigs99WorkerSshYaml() (*asset, error) {
	bytes, err := ignitionConfigs99WorkerSshYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-configs/99-worker-ssh.yaml", size: 321, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x20, 0xa0, 0xab, 0x11, 0x88, 0x8a, 0xf4, 0x76, 0x60, 0xdd, 0x2c, 0x5, 0xc9, 0x3c, 0xcf, 0x32, 0x53, 0xd2, 0xb6, 0x3b, 0xde, 0x36, 0x76, 0xc4, 0x8, 0xcb, 0xe, 0x68, 0xc8, 0x18, 0x94}}
	return a, nil
}

var _kubeApiserverClientConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x4d\x0a\xc2\x40\x0c\x05\xe0\x7d\x4e\x91\x0b\x8c\x52\x74\xe3\x71\xda\xf4\x2d\x4a\xc7\xcc\x90\x79\x06\x7a\x7b\xf1\x0f\xdc\x7e\xf0\x59\xdd\xe0\x94\x44\x2c\x7a\x11\x6f\xcb\xe6\xab\xac\x48\xe5\xc3\x25\x70\x6f\x44\x31\x04\x0b\xeb\xd0\x81\x48\xc4\x97\xb5\x75\x78\x76\x2f\x1f\xd5\x69\xba\x5d\x95\xd6\xc5\x66\x1d\xb0\x00\xcf\x36\x9f\x2c\x28\xaf\xff\x23\xd6\xf1\xb6\x1d\xc7\x3f\xed\x38\xe4\x19\x00\x00\xff\xff\xa7\x87\x5c\x3d\x8b\x00\x00\x00")

func kubeApiserverClientConfBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverClientConf,
		"kube-apiserver/client.conf",
	)
}

func kubeApiserverClientConf() (*asset, error) {
	bytes, err := kubeApiserverClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/client.conf", size: 139, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0x8, 0xb0, 0xe0, 0x97, 0xc0, 0xab, 0x13, 0xb5, 0xad, 0xd4, 0x9a, 0xe2, 0xe2, 0x44, 0xd4, 0x34, 0x9d, 0xd7, 0x88, 0xfc, 0x56, 0xf1, 0x2b, 0x6b, 0xf7, 0x5d, 0x1e, 0x36, 0x47, 0x14, 0xe8}}
	return a, nil
}

var _kubeApiserverKubeApiserverConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x6a\xc4\x30\x0c\x40\x77\x7f\x85\xc8\xee\x40\xa1\x93\xd7\xce\x5d\xbb\x16\x45\x56\x8d\x48\x22\x1b\x47\xce\x92\xe6\xdf\x8f\x3b\xc8\x70\x47\x86\xbb\x9b\x9f\xde\x93\x84\x45\x7e\xb8\x2e\x92\x35\xc0\xfa\xe1\x46\xd1\x18\xe0\x2b\xeb\x9f\xa4\x6f\x2c\x6e\x66\xc3\x88\x86\xc1\x01\x28\xce\x1c\x60\x6c\x03\x7b\x2c\xb2\x70\x5d\xb9\xba\x03\x62\x4a\x95\x13\x5a\xae\x9e\x26\x61\x35\x4f\xd8\x53\xb5\x00\xff\xde\x6d\x1b\x88\xd2\xd4\x22\xff\x96\x51\xa0\xab\x39\x1f\xbc\x83\x4f\xd8\x77\x07\xb7\xee\xc4\xf6\x84\x4d\x79\x1e\x44\x39\x3e\x16\xae\x17\x09\xb1\x47\xa2\xdc\xd4\xfa\xd2\x86\x53\xff\x64\xee\xbe\xa1\xe9\x9d\xf5\x6c\x14\x5f\x7b\xfa\x12\x00\x00\xff\xff\x89\xb7\xa5\x9c\x7c\x01\x00\x00")

func kubeApiserverKubeApiserverConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverKubeApiserverConfigmapYaml,
		"kube-apiserver/kube-apiserver-configmap.yaml",
	)
}

func kubeApiserverKubeApiserverConfigmapYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-configmap.yaml", size: 380, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xfb, 0xd9, 0xa2, 0x34, 0x22, 0xc5, 0xbe, 0xfa, 0x21, 0x67, 0xb, 0x98, 0xa0, 0x36, 0xeb, 0xfa, 0xbe, 0xf3, 0xd3, 0x0, 0xdd, 0xa8, 0xb3, 0x24, 0xd8, 0xd3, 0x6f, 0xf8, 0xa8, 0xfe, 0x50}}
	return a, nil
}

var _kubeApiserverKubeApiserverDeploymentPatchYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xbd\xae\xdb\x30\x0c\x85\x77\x3f\x05\x5f\x40\x57\xb9\xab\x36\xa3\xe9\x50\x14\x76\x33\xb4\x73\xa1\xc8\x8c\x43\x44\x96\x54\xfd\x38\xf5\xdb\x17\x96\x6c\xc3\x41\xd3\x22\xc3\xdd\x48\xea\x90\xfa\xa4\x43\x06\xd6\x09\x90\x5d\x57\x01\x38\x19\xaf\x02\x78\x70\xa8\x78\xc4\xc1\x69\x19\xb1\x64\xca\x9a\x28\xc9\xa0\x0f\xfc\xc0\x03\xaa\xe4\x29\x4e\x9f\xac\x89\xf8\x3b\x56\x00\xa3\xd4\x09\x45\x05\x00\xe0\x93\xa9\xc3\x8f\x80\x5e\xc0\xfb\xe1\xf0\x9e\x6b\x4a\x3a\x79\x26\x4d\x91\x30\x14\x15\x40\xe7\xad\x5b\x63\x06\xcd\xd7\xf6\xdb\x71\xcb\xda\xcf\xdf\x7f\xd6\xc7\xe6\x4b\x5b\xbd\x46\x37\x5a\x9d\x06\x0c\x9c\x3d\xa2\x18\x39\xa0\x80\xd1\x19\x65\xcd\x85\xfa\x82\x92\xc3\x46\x6e\x77\x17\xd1\x2d\x9d\x91\x49\x47\x01\xfd\x88\x9e\xcd\x3d\x9a\xd0\x44\xb6\xb4\x7e\x0c\x47\x40\xe5\x31\xe6\x5a\x09\x57\x88\x92\xb5\xff\x47\x59\xba\x5f\x43\x99\xbb\x49\x61\xad\x94\x4d\x26\x4f\xde\x98\x66\x92\x17\xa7\xec\x6c\x7f\xfa\x26\xeb\xd0\x8c\xce\xb0\x42\x98\x0f\x68\x90\x3d\x0a\xf8\x95\xe4\xf4\x46\x96\x5f\x27\x87\x3e\x5c\xe9\x12\xf9\x22\x16\xf3\xf8\xb0\x13\x9f\x92\xd6\x27\xab\x49\x4d\x02\x6a\x7d\x97\x53\x58\x9c\x1a\x06\x69\xba\x72\x1d\x03\x9e\x82\xe7\xe1\x4c\x66\x9d\x93\xeb\xd2\xf7\x61\x55\x30\xb6\xf3\x99\x01\xc7\xa8\x56\x2d\x2f\x27\xbc\x70\xbe\xcd\x59\x56\xdd\xad\xbf\x91\xe9\x8f\xe4\xc5\xa3\x7e\xf5\x68\xbf\xe7\xab\x59\xce\xd3\x48\x1a\x7b\xec\x04\x44\x9f\x30\x97\x8b\xf5\xcd\xfc\xd9\x1b\xd0\x30\x67\xa7\xf2\xb9\xfb\xe1\xbb\x35\x78\xbe\x1c\xff\x6e\xdd\xbd\xf0\xef\xfd\xfe\x13\x00\x00\xff\xff\x4c\x8f\x6e\x87\xcb\x03\x00\x00")

func kubeApiserverKubeApiserverDeploymentPatchYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverKubeApiserverDeploymentPatchYaml,
		"kube-apiserver/kube-apiserver-deployment-patch.yaml",
	)
}

func kubeApiserverKubeApiserverDeploymentPatchYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverDeploymentPatchYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-deployment-patch.yaml", size: 971, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x32, 0x3f, 0x16, 0xec, 0x7b, 0xe3, 0x72, 0x79, 0x11, 0xc2, 0xd6, 0x83, 0xec, 0xd6, 0x27, 0xa2, 0xcd, 0xc4, 0x93, 0xbb, 0x2e, 0xba, 0xd0, 0xd2, 0x1d, 0x9c, 0xeb, 0x2, 0x82, 0xf1, 0xa8}}
	return a, nil
}

var _kubeApiserverKubeApiserverSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\x85\x30\x10\x45\xf7\xf9\x8a\xc1\x7d\x0a\xdd\xe6\x37\x0a\xdd\x4f\xe3\x20\x21\x9a\x84\x71\x94\x8a\xf8\xef\xc5\x56\x49\x0d\x79\xbe\xb7\x0c\xf7\x9e\x7b\x32\x98\xdc\x27\xf1\xe8\x62\x30\x30\xbf\x2b\xef\x42\x6b\xe0\x83\x2c\x93\xa8\x81\x04\x5b\x14\x34\x0a\x20\xe0\x40\x06\xfc\xf4\x45\x1a\x93\x1b\x89\x67\x62\x75\x86\x7f\xcf\x37\xcb\x62\x60\x5d\x21\x79\x07\xcd\xb5\xaa\x73\xa5\x81\x6d\xcb\x8c\xa7\xe5\x19\xe3\x69\x39\x98\x3d\xef\x49\xb4\xed\x1d\x05\xb9\xf5\x1d\xd5\x7f\xc2\x02\xbe\x13\x9f\x70\x36\x93\xd8\xb6\xaa\x2d\x82\x4a\xfd\x22\x2a\x82\xa3\x9e\x38\x7e\x2f\xaf\x5c\x85\x5d\xc7\xd4\xa1\x44\xd6\x25\x53\x9b\xba\xbb\xf1\xd1\x54\xfe\xd5\x5e\x74\x96\x34\x5a\x1b\xa7\x72\xad\x12\xfe\x62\x3f\x01\x00\x00\xff\xff\x31\xd0\x34\xe8\x50\x02\x00\x00")

func kubeApiserverKubeApiserverSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverKubeApiserverSecretYaml,
		"kube-apiserver/kube-apiserver-secret.yaml",
	)
}

func kubeApiserverKubeApiserverSecretYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-secret.yaml", size: 592, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xbd, 0x3f, 0x2d, 0xad, 0xe9, 0x4e, 0x6b, 0x92, 0xff, 0x1a, 0xa, 0x1a, 0xc6, 0x48, 0x57, 0x13, 0x33, 0x60, 0xdb, 0x23, 0x10, 0x2, 0x88, 0x50, 0xf2, 0xc2, 0xab, 0xaf, 0x70, 0x49, 0x8c}}
	return a, nil
}

var _kubeApiserverKubeApiserverVpnclientConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xb1\x0a\xc2\x30\x10\x87\xf1\xfd\x9e\xe2\x4f\xf7\x28\x82\xd3\xad\xce\xae\xee\x67\x72\xca\xd1\xf6\x1a\xd2\x34\x4b\xed\xbb\x8b\x8a\xa0\xeb\xc7\xc7\xaf\x37\x4f\x8c\xd3\xe4\x37\xbb\x9f\x25\x93\x64\xbb\x68\x99\x6d\x72\x46\x3b\xd0\xa8\x55\x92\x54\x61\x02\x5c\x46\x65\xf4\xcb\x55\x83\x64\x9b\xb5\x34\x2d\xa1\x65\x8f\x83\xa9\xd7\x10\xdf\x06\x7d\xef\x4f\xdd\xbd\x2a\xe3\x11\x68\x5d\x61\x1e\x87\x25\x29\xba\x7f\x63\xff\xb3\x76\x38\x62\xdb\xe8\x19\x00\x00\xff\xff\xf2\x66\x90\xe8\x96\x00\x00\x00")

func kubeApiserverKubeApiserverVpnclientConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverKubeApiserverVpnclientConfigYaml,
		"kube-apiserver/kube-apiserver-vpnclient-config.yaml",
	)
}

func kubeApiserverKubeApiserverVpnclientConfigYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverVpnclientConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-vpnclient-config.yaml", size: 150, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0xf8, 0xfe, 0xfc, 0x32, 0xb6, 0x83, 0x1f, 0x84, 0x61, 0xeb, 0x48, 0xd9, 0x25, 0xe9, 0x94, 0x5, 0x1, 0x7, 0x49, 0x63, 0xe5, 0x60, 0x1, 0x6c, 0xa5, 0xc2, 0xe8, 0xed, 0x44, 0x92, 0xc6}}
	return a, nil
}

var _kubeApiserverKubeApiserverVpnclientSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\xaa\xc3\x30\x0c\x85\xe1\x3d\x4f\x21\xb2\xfb\xc2\x5d\xfd\x1a\x85\xee\xaa\x73\x06\xe1\x44\x11\xb6\x6a\x08\x21\xef\x5e\x5a\xa7\x4b\xe9\xd0\x55\xfc\xdf\x51\x16\x9d\x22\x5d\x90\x0a\x7c\x60\x93\x2b\x4a\x95\x55\x23\xb5\xff\x61\x81\xf3\xc4\xce\x71\x20\x52\x5e\x10\x29\xdf\x6f\x08\x6c\x52\x51\x1a\x4a\x68\xa6\x69\x16\xa8\x87\xda\x07\xde\xb5\xcf\xf5\x2f\x15\x8f\xb4\xef\x64\x59\x68\x5c\x0d\xda\x4c\xc3\xc7\x40\xd7\xcf\x74\xa4\xe3\x38\x61\xc6\xf6\x2b\xcc\xd8\x4e\x98\xf8\xfb\xc3\x7e\x7f\x45\x8f\x00\x00\x00\xff\xff\xc9\x5e\x63\x07\xeb\x00\x00\x00")

func kubeApiserverKubeApiserverVpnclientSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeApiserverKubeApiserverVpnclientSecretYaml,
		"kube-apiserver/kube-apiserver-vpnclient-secret.yaml",
	)
}

func kubeApiserverKubeApiserverVpnclientSecretYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverVpnclientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-vpnclient-secret.yaml", size: 235, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x86, 0xab, 0x5d, 0xc3, 0x6c, 0xbf, 0x4a, 0xa, 0x2d, 0x72, 0x8a, 0x1d, 0xb1, 0x8f, 0xeb, 0x8f, 0x33, 0xc1, 0xe2, 0x21, 0xdb, 0xcb, 0x92, 0x44, 0xf8, 0xa2, 0xe9, 0x27, 0x87, 0xab, 0x34}}
	return a, nil
}

var _kubeControllerManagerKubeControllerManagerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcb\x31\xae\xc2\x30\x0c\x06\xe0\x3d\xa7\xf8\xd5\x3d\x4f\x7a\x12\x53\x56\x66\x56\x56\xe4\x26\xa6\xb2\xda\xd8\x91\x9b\x76\x29\xbd\x3b\x0b\x1c\x80\xfd\xfb\xa8\xc9\x9d\x7d\x15\xd3\x84\xfd\x3f\xcc\xa2\x25\xe1\x6a\xfa\x94\xe9\x46\x2d\x54\xee\x54\xa8\x53\x0a\x80\x52\xe5\x84\x79\x1b\x39\x66\xd3\xee\xb6\x2c\xec\xb1\x92\xd2\xc4\x1e\xbe\xca\xcd\x7a\xcc\xf4\x97\xbd\x27\xbc\x62\x38\x0e\x88\xe6\x65\x2b\xfc\x68\xb3\x60\xc8\x56\x47\x51\x2e\x1f\x33\xe0\x82\xf3\x0c\xc0\xca\xbe\x4b\xe6\xdf\xeb\x3b\x00\x00\xff\xff\x07\x08\xe4\xab\xc2\x00\x00\x00")

func kubeControllerManagerKubeControllerManagerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeControllerManagerKubeControllerManagerConfigmapYaml,
		"kube-controller-manager/kube-controller-manager-configmap.yaml",
	)
}

func kubeControllerManagerKubeControllerManagerConfigmapYaml() (*asset, error) {
	bytes, err := kubeControllerManagerKubeControllerManagerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-controller-manager/kube-controller-manager-configmap.yaml", size: 194, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x71, 0x31, 0x7c, 0x50, 0x7e, 0xcd, 0xdc, 0xe6, 0xf8, 0xc7, 0xe, 0x77, 0x8d, 0xb0, 0x4, 0xb8, 0xd8, 0xa4, 0x3, 0x3a, 0xc2, 0x47, 0x50, 0xd4, 0xd1, 0x15, 0x9f, 0x56, 0x65, 0x4, 0x3a}}
	return a, nil
}

var _kubeControllerManagerKubeControllerManagerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x41\x6a\xc4\x30\x0c\x85\xe1\xbd\x4f\x21\xb2\x77\xa0\x5b\x5f\xa3\xd0\xbd\xaa\xa8\x41\xd8\x96\x83\xac\x04\x4a\xc8\xdd\x4b\x87\x19\xc2\x90\xac\xff\xf7\xf1\x70\x91\x2f\xb6\x2e\x4d\x13\x6c\x1f\x21\x8b\x4e\x09\x3e\x99\x8c\x3d\x54\x76\x9c\xd0\x31\x05\x00\xc5\xca\x09\xf2\xfa\xcd\x91\x9a\xba\xb5\x52\xd8\x62\x45\xc5\x99\x2d\xbc\x56\xff\x9d\x9a\xfe\xc8\x9c\x60\xdf\x61\xc9\x02\x83\xa8\xb3\x29\x96\x88\x53\x15\x1d\xcf\xc9\x00\xc7\x11\x00\x3a\xdb\x26\xc4\x11\x89\xda\xaa\x3e\x66\xfe\x3d\xf1\x4d\x7c\x32\x2a\x6b\x77\xb6\xd8\x65\x56\xb6\x91\xcc\x4f\x75\x6d\xf7\xe8\xed\xea\xda\x1e\xe8\x2f\x00\x00\xff\xff\x95\x3f\x5a\xcd\x21\x01\x00\x00")

func kubeControllerManagerKubeControllerManagerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeControllerManagerKubeControllerManagerSecretYaml,
		"kube-controller-manager/kube-controller-manager-secret.yaml",
	)
}

func kubeControllerManagerKubeControllerManagerSecretYaml() (*asset, error) {
	bytes, err := kubeControllerManagerKubeControllerManagerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-controller-manager/kube-controller-manager-secret.yaml", size: 289, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0xe3, 0x16, 0xca, 0xad, 0x6e, 0x7d, 0x13, 0xbb, 0xd5, 0x4f, 0x5e, 0x21, 0x10, 0x96, 0xba, 0xcb, 0xe0, 0x9f, 0x41, 0x19, 0x7e, 0x53, 0xbb, 0xde, 0x2, 0x65, 0xa, 0x33, 0xc, 0x23, 0x44}}
	return a, nil
}

var _kubeSchedulerKubeSchedulerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\x0e\xc2\x30\x0c\x85\xe1\xdd\xa7\x78\xea\x5e\x24\x56\x5f\x03\x89\xdd\x24\x0f\xb0\xd2\xb8\x55\x9a\xb2\x54\xbd\x3b\x62\x40\x5d\xff\xff\x2b\x1e\x59\x71\x63\x6a\xec\x62\x8b\xdf\xd9\x56\x9f\x43\xf1\xb9\x4a\x65\xb7\x6c\xdd\x54\x80\xb0\x4a\x45\xd9\x1e\x1c\xd7\xf4\x66\xde\x26\x36\xf9\xcf\x5f\x4e\x73\x3c\xfd\xa5\xd8\x77\x2c\xc5\x31\x78\x74\xb6\xb0\x69\xb4\x5c\x3d\x2e\x27\x19\x70\x1c\xf2\x0d\x00\x00\xff\xff\xf0\x1d\xb7\x25\x77\x00\x00\x00")

func kubeSchedulerKubeSchedulerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeSchedulerKubeSchedulerSecretYaml,
		"kube-scheduler/kube-scheduler-secret.yaml",
	)
}

func kubeSchedulerKubeSchedulerSecretYaml() (*asset, error) {
	bytes, err := kubeSchedulerKubeSchedulerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-scheduler/kube-scheduler-secret.yaml", size: 119, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x6b, 0xe4, 0x78, 0x8f, 0x84, 0xa6, 0xcb, 0xa0, 0x90, 0x62, 0xea, 0x7f, 0x89, 0xca, 0x92, 0xfd, 0x65, 0x27, 0xb6, 0xed, 0xd0, 0xee, 0xcc, 0x23, 0xa3, 0xc0, 0x20, 0x3c, 0x8, 0x9e, 0x6e}}
	return a, nil
}

var _machineConfigServerClusterInfrastructure02ConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x7d\x0a\xab\x0f\xd0\x89\x6b\x6e\x6c\xe3\x50\x09\xaa\x69\x63\xdc\x4d\xea\xb2\x68\x6d\x12\x62\x67\x62\x9a\xfa\xee\x28\xcd\x26\x46\x39\x72\xab\x7f\xff\xfe\xfe\xda\x41\x6f\xde\x28\xb0\x71\x56\x81\x76\xb6\x33\x1f\x95\xf3\x64\xf9\x60\x3a\xa9\x8c\x5b\x9c\x1e\x8a\xa3\xb1\xad\x82\xda\x76\x01\x59\x42\xd4\x12\x03\x15\x03\x09\xb6\x28\xa8\x0a\x00\x8b\x03\x29\xd0\x7d\x64\xa1\x50\xb0\x27\x9d\x54\xdd\xbb\xd8\xae\x26\x64\x2a\x6f\xb6\xb2\x2c\x58\x50\x22\x27\x11\xbd\xd9\x51\x38\x51\xa8\xad\x50\xb0\xd8\xef\xb7\xb5\x82\x83\x88\x67\xb5\x58\x5c\x2e\x50\x3d\x7d\xe5\xc6\xe3\xa6\x5e\x37\xbb\x06\x07\x82\x71\x54\xb3\xce\xc6\x05\x81\x71\xbc\x07\xee\xb7\xcf\xff\x02\x91\xe8\x76\x6d\x58\xbb\x13\x85\xf3\xda\x0d\x68\xac\x82\xe4\x5e\x22\x53\xae\xb3\xd1\xfc\xba\x4b\x33\xed\x78\x8c\xef\x14\x2c\x09\x71\x01\xe0\x7b\x94\xce\x85\x61\x1a\x37\x1d\x54\x9b\xab\xf0\x7a\xf6\xe9\x1f\x12\xf4\xaf\x44\x3d\xa7\xaf\xc6\x59\x4a\x73\x64\xdb\x1c\x77\xa3\xed\xf2\x0d\xaf\x4c\xfa\x9c\x31\xca\x7a\xf9\xb2\x4a\x0f\x50\xe6\x31\x00\x39\x7b\xca\x1b\xcc\xc2\xe0\x27\xed\xce\x38\x0b\xfe\x0e\x00\x00\xff\xff\xcb\x35\xfb\xaa\x27\x02\x00\x00")

func machineConfigServerClusterInfrastructure02ConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerClusterInfrastructure02ConfigYaml,
		"machine-config-server/cluster-infrastructure-02-config.yaml",
	)
}

func machineConfigServerClusterInfrastructure02ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterInfrastructure02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-infrastructure-02-config.yaml", size: 551, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x5c, 0x4d, 0xd, 0x5f, 0xec, 0x8c, 0x5b, 0x7d, 0xc3, 0x9e, 0x37, 0x15, 0x45, 0xc8, 0x21, 0xdd, 0x31, 0xbb, 0x87, 0xdc, 0x4e, 0x4b, 0x1d, 0xf8, 0x76, 0xb9, 0xaa, 0x5e, 0x51, 0x98, 0xe4}}
	return a, nil
}

var _machineConfigServerClusterNetwork02ConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x41\x4e\xc3\x40\x0c\x45\xf7\x73\x8a\x7f\x01\x82\x80\x9d\xb7\xb0\xe9\xa6\x8a\x00\xb1\x1f\x4d\x1c\x6a\x35\x1d\x8f\xc6\x6e\x69\x15\xf5\xee\x28\x9d\x20\xd4\xa5\x9f\x9e\xdf\x8f\x45\xbe\xb8\x9a\x68\x26\x24\xcd\xa3\x7c\x77\x5a\x38\xdb\x4e\x46\xef\x44\x1f\x4f\x4f\x61\x2f\x79\x20\x6c\xd9\x7f\xb4\xee\xc3\x81\x3d\x0e\xd1\x23\x05\x20\xc7\x03\x13\xd2\x74\x34\xe7\x1a\xac\x70\x5a\xe8\x7a\xaf\x0f\x0b\x79\x40\x92\xa1\x12\xe6\x19\x5d\xaf\xc3\xeb\xe6\xed\x1d\xd7\x6b\x00\x80\x9d\x9a\xf7\x95\x47\x39\x13\x9e\x5f\x02\xc0\x67\xe7\x9a\xe3\xb4\xe9\xe9\x26\x14\x9d\x24\x5d\x08\xf3\xe2\xe7\xd6\xfc\xbc\x14\x6e\xb5\xed\x3f\x68\x45\xe3\x7a\x92\xc4\x77\xe3\x8b\xf8\xd1\xf8\xdf\xb4\x79\xf4\xa3\xdd\xaa\xbf\x01\x00\x00\xff\xff\x5d\x2c\x4f\xbe\x02\x01\x00\x00")

func machineConfigServerClusterNetwork02ConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerClusterNetwork02ConfigYaml,
		"machine-config-server/cluster-network-02-config.yaml",
	)
}

func machineConfigServerClusterNetwork02ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterNetwork02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-network-02-config.yaml", size: 258, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x7c, 0xc1, 0xb5, 0xe3, 0x6b, 0x3e, 0x99, 0xf7, 0xcd, 0x36, 0x54, 0x33, 0x86, 0xad, 0xb8, 0x71, 0xc9, 0xb8, 0x83, 0x77, 0x7f, 0xf4, 0xfb, 0x67, 0x51, 0x27, 0x6f, 0xf0, 0xa8, 0xa2, 0x7c}}
	return a, nil
}

var _machineConfigServerClusterProxy01ConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x31\x0a\x02\x41\x0c\x40\xd1\x3e\xa7\x08\x7b\x80\x15\xdb\x74\xe2\x05\xac\xec\xc3\x4c\x56\x83\x6e\x32\x4c\xb2\xa2\x88\x77\x97\x29\xb6\x7c\x9f\xcf\x4d\xaf\xd2\x43\xdd\x08\x8b\xdb\xa2\xb7\xd9\x9b\x58\xdc\x75\xc9\x59\xfd\xf0\x3a\xc2\x43\xad\x12\x5e\xba\xbf\x3f\xb0\x4a\x72\xe5\x64\x02\x44\xe3\x55\x08\xcb\x73\x8b\x94\x0e\xd1\xa4\x8c\x9a\x7d\xb8\x9e\x4f\x03\xfb\x34\x4d\x10\xc9\xb9\x05\xe1\xf7\x07\xff\x00\x00\x00\xff\xff\xd9\xa8\x50\x94\x74\x00\x00\x00")

func machineConfigServerClusterProxy01ConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerClusterProxy01ConfigYaml,
		"machine-config-server/cluster-proxy-01-config.yaml",
	)
}

func machineConfigServerClusterProxy01ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterProxy01ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-proxy-01-config.yaml", size: 116, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xd0, 0x3e, 0xff, 0xad, 0x50, 0x5, 0x8b, 0x17, 0x92, 0x16, 0x8a, 0x17, 0x94, 0xd3, 0x44, 0x21, 0x93, 0xa9, 0xe7, 0xf, 0x40, 0xe3, 0x40, 0x52, 0xa6, 0x7b, 0xd8, 0x93, 0x3d, 0xea, 0x2a}}
	return a, nil
}

var _machineConfigServerInstallConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xa1\x0e\x42\x31\x0c\x46\x61\xdf\xa7\xe8\x13\x00\x33\x88\x5a\x30\x38\x82\xc0\x37\x4b\x81\x86\xdd\xbf\x4b\xef\x02\x82\xf0\xee\x64\xe4\xc8\xf3\x69\xf7\xab\xe5\xea\x01\xe1\x57\xa1\x1a\x18\x19\xed\xdc\x14\x26\xc4\x9c\xd6\x9b\x57\x5d\x85\x0b\xc1\xc6\x3b\xf2\xe9\xb8\xcf\xb3\x68\x7d\x38\xec\x70\x3a\x5e\x84\xcb\x6e\xf3\x6f\x5b\xf6\xd4\x9b\x8e\x5b\xe4\x32\x11\x02\x26\xfc\xf9\xd2\x2f\x00\x00\xff\xff\x19\x92\x76\xc0\x67\x00\x00\x00")

func machineConfigServerInstallConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerInstallConfigYaml,
		"machine-config-server/install-config.yaml",
	)
}

func machineConfigServerInstallConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerInstallConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/install-config.yaml", size: 103, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xb5, 0x2f, 0xb1, 0xff, 0x37, 0xf6, 0x89, 0xa6, 0x71, 0xf2, 0xe4, 0x19, 0xcf, 0x58, 0x7e, 0x3c, 0x99, 0x4f, 0x0, 0x9d, 0x69, 0x93, 0xf2, 0x2b, 0xd9, 0x89, 0x93, 0x11, 0xd9, 0x7f, 0xd1}}
	return a, nil
}

var _machineConfigServerMachineConfigServerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x4f\xfb\x30\x10\x47\x77\x7f\x8a\x53\x76\xe7\xdf\xfe\xc5\x94\x95\x99\x95\x15\x1d\xce\x15\xac\xd8\x67\xeb\x7c\x29\x54\xa5\xdf\x1d\x15\x42\x40\x69\x14\x51\x32\xe7\xf7\xde\xcb\xc9\x98\xfd\x3d\x49\xf1\x89\x1b\xd8\x6f\x4d\xe7\xb9\x6d\xe0\x36\xf1\xce\x3f\xdd\x61\x36\x91\x14\x5b\x54\x6c\x0c\x00\x63\xa4\x06\x22\xba\x67\xcf\x64\xdd\xc7\xc6\x16\x92\x3d\x89\xf9\xda\x48\x4a\x6a\x1d\xd6\x4e\xb4\x81\x37\x6b\x8e\x47\xf0\xec\x42\xdf\xd2\x43\xee\x3c\x54\x3f\xbe\x57\x70\x03\xa7\x93\x01\x70\x29\x3e\x7a\xa6\x76\x89\x9b\x6c\xbe\xd9\xd0\x17\x25\xb1\x9e\x77\x82\x45\xa5\x77\xda\x0b\xd9\xcd\xff\xe1\xff\xea\x03\xc6\x30\x31\x42\x35\x7b\xc3\xbf\x5f\xb9\x2e\xca\x4c\xfa\x92\xa4\x5b\x97\x9c\x97\x5c\xb4\xb2\xa4\xd7\x83\xdd\x6c\x57\x94\xe6\x14\x63\xc7\x73\x51\x0c\xe1\x0f\xfa\x19\x72\xb4\xe6\x3e\x04\x5b\xc8\x09\xe9\x35\xca\x29\x36\xfa\x22\x9e\x2f\xa9\x07\xea\x13\xca\x29\x85\x6b\xe4\x8b\x8e\xb1\x74\x7e\x93\xb5\xa5\x45\xc7\x50\x7a\x0f\x00\x00\xff\xff\xea\x57\xe4\x9e\x85\x03\x00\x00")

func machineConfigServerMachineConfigServerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMachineConfigServerConfigmapYaml,
		"machine-config-server/machine-config-server-configmap.yaml",
	)
}

func machineConfigServerMachineConfigServerConfigmapYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-configmap.yaml", size: 901, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x8b, 0x81, 0x3f, 0x1c, 0x48, 0x5b, 0x28, 0xee, 0x52, 0xfc, 0x29, 0x6, 0x12, 0x89, 0x13, 0x1b, 0xc5, 0x57, 0xd6, 0x2, 0xae, 0x31, 0x2, 0x3a, 0xb9, 0x50, 0xf2, 0xb8, 0x2a, 0xc4, 0x40}}
	return a, nil
}

var _machineConfigServerMachineConfigServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x6f\x1b\x37\x12\x7f\xd7\xa7\x98\x53\x0c\x04\xc8\x81\x5a\xfb\x2e\x38\x04\x8b\xf8\x80\xd4\xb1\x8b\x02\x8d\x63\x24\x6d\x9f\x02\x14\x14\x77\xa4\x65\xcc\x25\x59\x72\x56\xb6\xa2\xe8\xbb\x17\xd4\x4a\xab\xfd\x43\xc9\xab\xa4\xad\x1e\x04\x8b\x9c\xf9\xcd\xcc\x6f\x86\xc3\xa1\x19\x63\x23\x6e\xe5\x6f\xe8\xbc\x34\x3a\x85\xc5\xc5\xe8\x5e\xea\x2c\x85\x8f\xe8\x16\x52\xe0\x1b\x21\x4c\xa9\x69\x54\x20\xf1\x8c\x13\x4f\x47\x00\x9a\x17\x98\x42\xc1\x45\x2e\x35\x32\x61\xf4\x4c\xce\x99\x47\xb7\x40\x37\xea\xe2\xb9\x29\x17\x13\x5e\x52\x6e\x9c\xfc\xc2\x49\x1a\x3d\xb9\x7f\xe5\x27\xd2\x24\xb5\xa5\x0f\x46\xe1\x0f\x52\x67\x52\xcf\x07\x9b\x71\x46\xe1\x07\x9c\x05\x31\x6e\xe5\x8f\xce\x94\xf6\x88\xad\x11\x40\x65\xea\x4a\x95\x9e\xd0\x05\x8b\xb5\x01\xcc\x24\x8d\x7c\x39\xfd\x8c\x82\x7c\x00\x64\x10\x65\x00\xe0\xb4\xc8\xb9\xb5\x7e\x1f\xe4\x5b\xb4\xca\x2c\x0b\x3c\x81\x4a\x6f\x51\x04\x19\x87\x56\x49\xc1\x7d\x0a\x17\x23\x00\x8f\x0a\x05\x19\x97\x6e\x1c\x2a\x38\x89\xfc\x67\x3e\x45\xe5\xab\x85\xc0\x87\x3d\x84\x08\x40\x58\x58\xc5\x09\xb7\xda\x0d\x4f\xc2\x47\xb5\x80\x9e\x80\x02\xd8\x39\x18\x3e\x64\x14\xba\x0d\xe7\x0d\x7d\x06\xf7\xb8\x4c\x61\x5c\x94\x8a\x24\xe3\x5f\xd8\x83\x71\xf7\xe8\xc6\xb5\x00\x80\xb1\x41\xcd\xb8\x14\xc6\xd7\x7f\x94\x5c\x35\xf7\x16\x5c\x95\x98\xc2\x98\x5c\x89\xcd\x75\x9c\xcd\x50\x50\x0a\xb7\xe6\xa3\xc8\x31\x2b\x37\xc9\xdc\x38\xd4\xca\xd8\xed\x11\x6e\x2b\x79\xa9\x25\x5d\x19\x4d\x5c\x6a\x74\xb5\xdf\x0c\x64\xc1\xe7\x98\xc2\x6a\x55\xfd\x75\x63\x1c\x8c\x3b\x38\x3b\xbf\xc7\xb0\x5e\xd7\xae\x45\xb3\xb9\x93\x64\x53\x63\xc8\x93\xe3\xb6\x96\x17\xa6\x28\xb8\xce\x9a\x84\x25\x53\xa9\x93\x29\xf7\xf9\x3e\x09\x6e\xde\xa2\x94\x89\xc6\x8f\xaf\xac\xc1\x4b\x71\x9f\x49\x07\xcc\x42\x52\x08\xc1\x0a\xae\xe5\x0c\x3d\xf9\xa4\x36\x9c\xd4\x6b\x03\xb4\x62\xb2\xf8\x88\xe2\x50\x7c\x50\x9b\x81\x4f\x81\xb9\x19\x28\xf4\x9e\x72\xae\x7f\x5f\x54\x67\x02\xc6\x2f\x27\xff\x9b\x9c\xb7\x28\x03\x60\x0c\x49\x64\x4c\xf0\xcb\x84\x7b\x8f\x4d\xcb\x89\x33\x86\x98\xe0\x13\xe1\x08\x3e\xf5\x75\x0a\x24\x27\xc5\x37\xa9\x6e\x12\x7b\xd9\xca\x70\x58\x0f\xbe\x75\xc4\xef\xcb\x29\x32\xa1\x24\x6a\x62\x7c\x1e\xbe\x23\xba\x3d\xa1\x0a\x68\xb5\x02\xd4\x59\x37\xde\xad\x6b\x27\x39\x5d\x19\x88\xe9\x08\x53\x4c\xa5\xc6\x2c\xae\x77\xa8\x18\x23\x31\x1c\xa9\xf0\x27\x40\xbd\x30\x9a\x0e\x30\xb3\x93\x35\x9e\x6d\xa5\x22\x80\x52\xcf\x1c\x8f\x69\x5b\x13\x4d\x09\xa2\xe5\x4a\x2e\x30\x9a\xc7\xe6\xae\x9d\x71\xa9\xcc\x02\x63\x51\x08\xe3\x30\xd3\x3e\x06\xb1\xdd\x8a\x85\x1e\x34\x6c\x39\x55\xd2\xe7\x18\xa7\xb1\x25\x11\x81\xc8\xb9\x75\xe6\x71\x19\xd3\xdd\x6d\x39\x53\x52\x54\x77\xca\x1d\x86\xae\xad\x98\x2b\x35\xc9\x02\xc5\x6c\x1e\x03\x8a\xc9\x1d\xe4\x7d\x9b\xc6\x99\x54\x18\xab\xaf\xea\xce\xac\x64\x3d\xb9\x52\x50\xe9\x90\x9d\xff\x67\xab\x37\x59\xf2\x42\x75\x70\x35\x52\x68\xf5\x03\x91\x77\xd2\x47\x21\x2b\x62\x86\x01\x56\xb2\xe7\x17\x47\xe0\x8e\x03\x49\xed\x89\x2b\x75\x44\x3f\x43\x4f\x2c\x93\xee\xb2\xdd\x35\xbb\x4e\x97\x4a\x31\x8f\xc2\x21\x45\xac\x34\x76\x37\x26\x46\x0d\xdd\x67\xf0\xab\x47\x30\xa5\x03\xf3\xa0\x61\xd7\x40\xcd\x0c\x2a\x97\xac\x31\xca\x03\xe5\x9c\xc0\x3f\x70\x0b\x05\x0f\x81\x03\xd7\x19\x54\x77\x6c\xab\xc3\x2f\x06\xdc\x08\x03\x44\x26\x54\xd8\xde\xc5\x71\xd2\x5d\x23\x86\xdc\x4d\xc1\x4c\xf2\x62\x80\x60\xd2\x41\xee\x11\xfc\x62\xb2\xed\x3e\x7b\xd2\xaa\x5c\x9e\x82\xbd\x30\xaa\x2c\xf0\x5d\x98\x28\x5a\xf7\x70\x11\x56\xee\x38\xe5\x69\x07\xae\xe1\xd5\x76\x20\x88\xee\xb6\x11\xba\xbe\xf7\x40\xaa\x10\x8e\x8e\x28\x42\xc9\xd6\xdd\xba\xd9\xb9\x2b\x95\xba\x33\x4a\x8a\x65\x0a\x3f\xcd\x6e\x0d\xdd\x39\xf4\xb8\x9d\x67\xf7\xf0\x52\x87\xf9\x97\x89\xd2\x93\x29\x3a\x0d\x7e\xef\x0c\xea\x45\x93\x82\x4a\xf5\xf6\xcd\xbb\xeb\x8f\x77\x6f\xae\xae\xbb\xa3\xdb\x8d\x33\x45\xda\x58\x04\x98\x49\x54\xd9\x76\x6e\xef\xad\x57\x4c\xec\x66\xd2\x49\x00\xf7\x96\x0b\xac\x65\x43\x65\x4b\x3d\x7f\x2b\x5d\x0a\x49\xb3\x16\x63\x73\x54\xe9\xdd\xf7\xcc\x52\x82\x13\xbc\x7e\x3d\xbe\x7e\x7f\x33\x86\xff\xc3\x78\x92\x08\x63\x97\x4c\xce\xb5\x0c\x33\xee\xae\x31\xf8\xbc\x39\x97\x3e\xfb\x57\xdf\x62\xc5\xef\xe5\xf8\x6c\x75\xb1\x6e\xcd\xbd\x02\xe6\x48\x20\x0a\x38\x5b\x05\x89\x35\x30\x0d\xe3\xb3\x55\x4d\xe6\x7a\x0c\xcc\xc0\x67\x6f\xb4\xe5\x94\x5f\x3e\x5f\xc1\x64\x43\x4b\xf8\x82\xf5\xf3\xe0\xd4\x80\x2a\xae\xc0\x93\x67\x1d\xc7\x59\x92\xac\x37\x27\xa1\xe9\xd2\xf5\xfb\x9b\x26\x01\x79\x61\x32\xf8\xf7\x23\x1c\x0c\x3d\x1a\x0d\x53\xd0\x91\xbc\xac\xe6\xf7\x58\x7c\x4c\x1b\x96\x23\xcf\xd0\x79\xf8\x0a\xfc\xe1\x1e\x9e\xaf\xc0\x3a\xa9\x09\xce\x2e\x42\x90\x5f\xe1\x31\xa4\x0c\x98\xbe\x18\xe0\xc7\xdf\x73\x52\xbf\xfd\x39\x70\xca\xf9\xeb\xe0\x85\x51\xc9\x19\xa5\x70\xe8\xb3\x61\x57\xee\x07\x71\x0e\x9e\x81\x3e\x3e\xdb\x8c\x78\x15\x0b\x91\x3b\xee\x68\x8f\x67\xdd\x5b\xef\xe9\x1a\x6d\xf5\xe8\x46\xe0\x0d\x98\x16\x7c\xf3\xea\xf5\x91\x64\xfe\x33\x0d\x3b\x6e\x7b\x8f\xd0\xdf\x15\x7f\xe1\x4b\xf3\x3b\x4a\xab\xf5\x02\x3e\xa9\x98\x3a\x9a\xc3\x0a\xa9\x5e\xdd\x3c\x61\xb6\x2d\x21\x41\x12\x89\xb1\xa8\x7d\x2e\x67\x94\xec\x77\x5a\xaa\x1e\x45\x98\x34\xad\x71\x74\xf9\xea\xe5\xcb\xff\xb6\x36\xa5\x6e\x6d\x9f\xbf\x3a\xaf\xb7\xc3\x8a\xef\xdf\x53\x39\x51\x73\x7c\xa9\xd3\x71\x67\x1c\xa5\xd0\x42\x00\xb0\xce\x90\x11\x46\xa5\xf0\xcb\xd5\x5d\x14\xca\x1f\xc1\x6a\x3a\x7b\x08\x6b\x48\x99\xb6\x68\xea\x15\x59\x84\x36\x00\x87\x3c\x7b\xaf\xd5\x32\x85\xd0\x76\x8f\xe0\x16\xa2\x71\x1c\x07\x15\x70\x1c\x45\x1c\x45\x79\xfa\x20\x05\x14\xef\x55\xf0\x27\xea\x05\xa9\xdd\x7a\xc5\x58\xe3\xf4\x1c\xa4\xa1\xea\x1a\xcd\x29\xa3\x5a\x39\xf2\x2f\x21\xd6\x83\x61\x51\x27\xbe\x09\xbc\x87\x18\xa3\x05\x0b\x4b\xcb\xcd\x70\xb3\x5a\x47\x5c\x38\x49\xa1\xc3\x47\xf5\xf3\x1d\xb7\x69\x9f\xe2\xa8\xbf\x7f\x06\x00\x00\xff\xff\xd3\x4d\xc5\xb6\x17\x16\x00\x00")

func machineConfigServerMachineConfigServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMachineConfigServerDeploymentYaml,
		"machine-config-server/machine-config-server-deployment.yaml",
	)
}

func machineConfigServerMachineConfigServerDeploymentYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-deployment.yaml", size: 5655, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x1c, 0xe7, 0x28, 0xdf, 0xdc, 0x97, 0xe8, 0xd1, 0x4d, 0xb7, 0x15, 0x67, 0x6, 0xf2, 0x5a, 0x58, 0x66, 0x46, 0xc3, 0xcb, 0xe, 0x1e, 0xdf, 0x41, 0x56, 0x45, 0x93, 0xd8, 0x6a, 0xc8, 0x79}}
	return a, nil
}

var _machineConfigServerMachineConfigServerKubeconfigSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xbd\xaa\xc2\x40\x10\xc5\xf1\x7e\x9e\x62\x48\xbf\x17\x6e\x3b\x2f\x61\x21\xd8\x4f\x92\xa3\x0e\xeb\x7e\xb8\x3b\x09\x48\xc8\xbb\x8b\x88\xa4\xfd\x9d\xf3\xd7\x6a\x17\xb4\x6e\x25\x0b\xaf\xff\x14\x2d\xcf\xc2\x67\x4c\x0d\x4e\x09\xae\xb3\xba\x0a\x31\x67\x4d\x10\x4e\x3a\xdd\x2d\x23\x4c\x25\x5f\xed\x16\x3a\xda\x8a\x16\xe2\x32\xe2\x2b\xe4\xaf\x0a\xe1\x53\xd5\xe7\x02\xfa\xb5\xc7\x2e\xbc\x6d\x5c\xa3\xf1\xf0\xb1\x07\x3c\x8c\xa5\x78\xf7\xa6\xf5\xef\x78\x0d\xbc\xef\xf4\x0e\x00\x00\xff\xff\x03\xbf\xf1\x82\x99\x00\x00\x00")

func machineConfigServerMachineConfigServerKubeconfigSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMachineConfigServerKubeconfigSecretYaml,
		"machine-config-server/machine-config-server-kubeconfig-secret.yaml",
	)
}

func machineConfigServerMachineConfigServerKubeconfigSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerKubeconfigSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-kubeconfig-secret.yaml", size: 153, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x1b, 0xd0, 0x29, 0x64, 0x5c, 0x99, 0xb2, 0xb, 0xb4, 0xec, 0xad, 0x41, 0xed, 0xc2, 0x78, 0xe7, 0xe7, 0x93, 0xe8, 0xf2, 0x5c, 0x1a, 0x12, 0xff, 0x9f, 0x5b, 0xc3, 0xe3, 0x88, 0x8f, 0xd7}}
	return a, nil
}

var _machineConfigServerMachineConfigServerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcb\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\x71\x74\xaf\xe0\x7a\x2f\xe1\x20\xb8\x1f\xe9\xaf\x1e\x31\x69\xbc\x9c\x85\x50\xfa\xee\xa2\xe8\x26\xb8\x7f\x9f\x54\x3d\xc1\x9a\xce\x85\x69\xd9\x87\xa4\x65\x62\x3a\x22\x1a\x3c\x64\xb8\x4c\xe2\xc2\x81\xa8\x48\x06\x53\x96\x78\xd5\x82\x31\xce\xe5\xac\x97\xb1\xc1\x16\x58\xf0\x5e\xc1\x74\xa8\x72\x7f\x20\x7c\x83\xdf\xda\x2e\x9a\x33\xad\x2b\xd5\xa4\x34\xfc\xbc\x2f\x32\xd0\xb6\x7d\x42\x42\xff\x17\x12\xfa\x3b\x3c\x03\x00\x00\xff\xff\xe0\xf3\x37\x27\xb9\x00\x00\x00")

func machineConfigServerMachineConfigServerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMachineConfigServerSecretYaml,
		"machine-config-server/machine-config-server-secret.yaml",
	)
}

func machineConfigServerMachineConfigServerSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-secret.yaml", size: 185, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x1a, 0x70, 0x89, 0x50, 0xd4, 0x29, 0x57, 0x8b, 0x21, 0x2, 0x81, 0x50, 0xbf, 0xb6, 0x7b, 0xea, 0x12, 0x50, 0xa8, 0xac, 0x91, 0xa0, 0x29, 0x65, 0xb5, 0xa, 0xc1, 0x42, 0x7f, 0x87, 0xbd}}
	return a, nil
}

var _machineConfigServerMachineConfigServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\x8a\xc3\x40\x0c\x45\xfb\x39\x85\x2e\x60\xd8\xed\x16\xb5\xae\xb6\x33\xec\x92\x5e\x8c\x7f\xec\x21\xf6\x48\x68\x14\x43\x6e\x1f\x3c\x24\x65\xba\x27\xf1\x1e\x5f\xac\x5c\xe0\xad\x68\x65\x3a\xbe\xd3\xad\xd4\x99\xe9\x0f\x7e\x94\x8c\xb4\x23\x64\x96\x10\x4e\x44\x55\x76\x30\xed\x92\xd7\x52\x31\x64\xad\xd7\xb2\x0c\x0d\x7e\xc0\x53\x33\xe4\xd3\x31\xf5\x68\x27\x0c\x1d\x99\x7e\xbe\x12\xd1\xbb\x5d\x23\xac\x9f\xe6\x1a\x9a\x75\x63\xfa\x1f\xa7\xfe\x09\xf1\x05\x31\xbd\x9a\x5e\x35\x6c\xc8\xa1\xce\x5d\x10\xb3\x4f\xe3\x44\xf1\x30\x30\x8d\xdb\xbd\x05\xfc\x77\x4a\xcf\x00\x00\x00\xff\xff\x5f\x02\x21\xcb\xd4\x00\x00\x00")

func machineConfigServerMachineConfigServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMachineConfigServerServiceYaml,
		"machine-config-server/machine-config-server-service.yaml",
	)
}

func machineConfigServerMachineConfigServerServiceYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-service.yaml", size: 212, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x66, 0xf3, 0xab, 0xc7, 0xdb, 0x7d, 0xdb, 0xd3, 0x36, 0x63, 0xe3, 0x29, 0x21, 0xc3, 0xbf, 0xf1, 0x64, 0x8e, 0x99, 0xc4, 0x0, 0x40, 0xbe, 0x96, 0x6a, 0x27, 0xe2, 0x71, 0x13, 0xcd, 0x31}}
	return a, nil
}

var _machineConfigServerMasterMachineconfigpoolYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x4f\xc4\x30\x0c\x46\xf7\xfc\x0a\x2b\x7b\x8b\x58\xbb\xb2\x82\x84\x84\xc4\xee\xa6\xdf\x51\xab\x89\x5d\x25\x2e\xfc\x7d\x94\xeb\x72\x5b\x6f\xf6\xf3\x7b\x1f\xef\xf2\x8d\xda\xc4\x74\xa2\xc2\x69\x15\x45\x32\xbd\xc9\xcf\x51\xd9\xc5\x74\xb4\x1d\xda\x56\xb9\xf9\x28\xf6\xf2\xfb\x1a\x36\xd1\x65\xa2\x8f\x13\x7d\xbb\xa3\x9f\x66\x39\x14\x38\x2f\xec\x3c\x05\x22\xe5\x82\xae\x6b\x8e\x1a\x88\x32\xcf\xc8\xad\x1f\x88\xe2\x75\xa4\x24\x1b\xe6\x43\xb2\x0f\xa2\x71\xa2\x18\x43\xdb\x91\xfa\x7b\x79\xac\x7e\x21\x23\xb9\xd5\xd3\x5b\xd8\xd3\xfa\xfe\x10\x7a\x2a\x55\x2d\xa3\x27\xfe\xac\x6e\xa8\xb1\x4f\xb7\x05\x97\xe6\x0e\x0d\xfd\x77\xdc\x8e\x19\x55\xe1\x68\x5d\x77\x6a\xee\x93\xff\x03\x00\x00\xff\xff\x55\xb5\x6b\x18\x58\x01\x00\x00")

func machineConfigServerMasterMachineconfigpoolYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerMasterMachineconfigpoolYaml,
		"machine-config-server/master.machineconfigpool.yaml",
	)
}

func machineConfigServerMasterMachineconfigpoolYaml() (*asset, error) {
	bytes, err := machineConfigServerMasterMachineconfigpoolYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/master.machineconfigpool.yaml", size: 344, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xdf, 0xb1, 0x1a, 0xcd, 0x65, 0x5, 0x74, 0x9b, 0x35, 0x29, 0x3f, 0x81, 0xd2, 0x95, 0x60, 0xe4, 0xb4, 0xde, 0xb, 0x66, 0x37, 0x7d, 0xcd, 0xff, 0xaa, 0x4a, 0x2d, 0x3f, 0x13, 0x8, 0x1a}}
	return a, nil
}

var _machineConfigServerPullSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x0a\xc2\x40\x10\x44\xfb\xfb\x8a\xfd\x81\x44\x04\xb1\xd8\xd2\x5f\x10\xec\xd7\xcb\x44\xcf\x24\x7b\xc7\xed\x46\x90\x90\x7f\x17\x8c\x36\xd6\xf3\x66\xe6\x49\x49\x17\x54\x4b\x59\x99\x9e\xfb\x30\x24\xed\x98\xce\x88\x15\x1e\xfc\x55\xc0\x34\xcc\x57\x54\x85\xc3\xda\x94\x77\x5d\x8e\x03\x6a\xcc\xda\xa7\xdb\xc3\xb2\x86\x09\x2e\x9d\xb8\x70\x20\x52\x99\x60\x45\x22\x98\x72\x81\xda\x3d\xf5\xde\x6c\xec\x37\x65\x2a\xf3\x38\x36\xb6\x1d\xfc\x7a\xed\xff\x2a\xd3\xb2\x7c\xc8\xcd\xe4\x24\x86\xe3\x81\xd6\x35\xbc\x03\x00\x00\xff\xff\xdc\xbc\x0f\x44\xaf\x00\x00\x00")

func machineConfigServerPullSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerPullSecretYaml,
		"machine-config-server/pull-secret.yaml",
	)
}

func machineConfigServerPullSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerPullSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/pull-secret.yaml", size: 175, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0xa3, 0x78, 0x2e, 0xcc, 0xc1, 0xc4, 0x8a, 0x6b, 0xd4, 0x52, 0x56, 0xc2, 0x2f, 0x5c, 0xf4, 0xd5, 0xfc, 0xa2, 0xf7, 0xc7, 0xc6, 0x88, 0xe4, 0x32, 0xc1, 0x17, 0x5, 0x54, 0xc4, 0x58, 0xfc}}
	return a, nil
}

var _machineConfigServerWorkerMachineconfigpoolYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\x6e\xae\x30\x0c\x05\xe0\x9d\xa7\xb0\xd8\xe1\xea\xae\xac\x5d\x5b\xa9\x52\xa5\xee\x26\x98\x1f\x8b\xc4\x4e\x1d\xa7\x7d\xfd\x2a\x61\xf9\x37\x3a\xfb\xf8\x9c\x0f\x33\x7f\x92\x15\x56\x59\x20\x61\x38\x58\x28\xa8\xec\xfc\xa8\x86\xce\x2a\xb3\x66\x92\x72\xf0\xee\x33\xeb\xbf\xef\xff\xc3\xc9\xb2\x2d\xf0\x76\x45\x5f\x7a\xf4\x5d\x35\x0e\x89\x1c\x37\x74\x5c\x06\x00\xc1\x44\x0b\xfc\xa8\x9d\x64\x03\x40\xc4\x95\x62\x69\x07\x80\x51\x33\x19\xba\xda\x7c\xbf\x66\xf4\x55\xd9\x68\x9b\x76\xb5\xa9\xe6\x87\xe1\x46\xe3\x02\xe3\x78\x35\xdd\x17\xa4\xa0\xd3\x5a\x39\xfa\xc4\x72\x3d\x96\x4c\xa1\x41\xd2\xb3\xff\x83\x22\x05\x57\xbb\x84\x09\x3d\x1c\xaf\x4f\xe4\x3f\x4d\x99\xc6\x6e\x4b\x58\x9c\xac\x09\x45\x37\xba\x6d\x6e\xa1\xa9\xfd\xce\x67\x5d\xc9\x84\x9c\x4a\x97\xf7\x9a\x4e\xfe\x0d\x00\x00\xff\xff\x6a\x20\xb9\x18\xa2\x01\x00\x00")

func machineConfigServerWorkerMachineconfigpoolYamlBytes() ([]byte, error) {
	return bindataRead(
		_machineConfigServerWorkerMachineconfigpoolYaml,
		"machine-config-server/worker.machineconfigpool.yaml",
	)
}

func machineConfigServerWorkerMachineconfigpoolYaml() (*asset, error) {
	bytes, err := machineConfigServerWorkerMachineconfigpoolYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/worker.machineconfigpool.yaml", size: 418, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x3b, 0x1, 0x2c, 0x41, 0xf4, 0xce, 0xe5, 0xad, 0xbe, 0xe0, 0xc, 0xbe, 0xab, 0x18, 0xc5, 0xe2, 0x84, 0xcd, 0x1f, 0x1e, 0x6f, 0x1a, 0x89, 0x56, 0xd8, 0x4f, 0x1, 0x68, 0x8d, 0x46, 0xce}}
	return a, nil
}

var _oauthOpenshiftIngressCertsSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\x31\x74\x5f\xc1\xed\x5c\x43\x70\x3f\x24\xaf\x3a\xa4\x4d\x43\x66\x14\x4a\xe9\xdd\x45\x69\xbb\x74\xfd\xbe\xf7\x4b\xd5\x3b\x9a\xe9\x5c\x98\xde\xd7\x90\xb5\x24\xa6\x1b\x62\x83\x87\x09\x2e\x49\x5c\x38\x10\x15\x99\xc0\x94\x30\xc8\x6b\xf4\x5e\xcb\xa3\xc1\xac\x8f\x68\xbe\x8f\x56\x25\x82\x69\xae\x28\xf6\xd4\xe1\x34\xe1\x28\xf8\x68\x97\xd8\x9c\x69\x5d\xa9\x66\xa5\xee\x88\x9c\x97\xef\xdc\xd1\xb6\xed\x38\x63\xf9\x87\x33\x96\x1f\xfe\x04\x00\x00\xff\xff\x81\xbb\x56\xa7\xc2\x00\x00\x00")

func oauthOpenshiftIngressCertsSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_oauthOpenshiftIngressCertsSecretYaml,
		"oauth-openshift/ingress-certs-secret.yaml",
	)
}

func oauthOpenshiftIngressCertsSecretYaml() (*asset, error) {
	bytes, err := oauthOpenshiftIngressCertsSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/ingress-certs-secret.yaml", size: 194, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x50, 0x47, 0x9a, 0x44, 0x5c, 0x89, 0xfb, 0x3f, 0x36, 0xf4, 0x0, 0x1c, 0xae, 0xbb, 0xc, 0x5e, 0xdc, 0xb2, 0xc2, 0x6b, 0x1d, 0xc9, 0x3c, 0xfa, 0x7a, 0x61, 0x9b, 0xd3, 0x88, 0xd9, 0x22}}
	return a, nil
}

var _oauthOpenshiftOauthServerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xb1\xae\xc2\x30\x0c\x05\xd0\xdd\x5f\x71\xd5\x3d\x4f\x7a\x12\x53\x56\x66\x56\x56\x64\x12\x97\x5a\x25\x76\xd4\xba\x2c\xa5\xff\xce\x80\x98\xcf\xe1\xae\x57\x59\x56\x75\xcb\x78\xfd\xd3\xac\x56\x33\xce\x6e\xa3\x3e\x2e\xdc\xa9\x49\x70\xe5\xe0\x4c\x80\x71\x93\x0c\xe7\x2d\xa6\xe4\x5d\x6c\x9d\x74\x0c\xfa\x69\xe1\xbf\xb2\x44\xc6\x3b\xd1\xbe\x43\xad\x3c\xb7\x2a\xb7\x3e\x2b\x86\xe2\xed\xae\x26\x35\x7d\xcf\x80\x13\x8e\x83\x3e\x01\x00\x00\xff\xff\xdc\x15\x01\x40\x7a\x00\x00\x00")

func oauthOpenshiftOauthServerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_oauthOpenshiftOauthServerConfigmapYaml,
		"oauth-openshift/oauth-server-configmap.yaml",
	)
}

func oauthOpenshiftOauthServerConfigmapYaml() (*asset, error) {
	bytes, err := oauthOpenshiftOauthServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/oauth-server-configmap.yaml", size: 122, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x93, 0xc1, 0x3, 0x15, 0x1b, 0xdf, 0xe7, 0x9, 0x14, 0x6d, 0xaf, 0x8c, 0xc7, 0xcb, 0xf1, 0x94, 0xd2, 0x9b, 0xb9, 0x3, 0x67, 0xf6, 0x18, 0x93, 0xab, 0xf9, 0xb4, 0x48, 0xd0, 0xa7, 0x61}}
	return a, nil
}

var _oauthOpenshiftOauthServerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\x31\x0a\x83\x40\x10\x85\xe1\x7e\x4f\x31\xd8\x2b\xa4\xdd\x6b\x04\xd2\x4f\xf4\xa9\xc3\xc6\x59\x99\x1d\x05\x11\xef\x1e\x12\x08\x26\x4d\xea\xff\x7b\x3c\x9e\xe5\x06\x2b\x92\x35\xd2\x7a\x09\x49\xb4\x8b\x74\x45\x6b\xf0\x30\xc1\xb9\x63\xe7\x18\x88\x94\x27\x44\xca\xbc\xf8\x58\xe7\x19\x5a\x46\xe9\x3d\x7c\x6a\x5a\xee\x68\xb3\xf6\x32\x44\xda\x77\x9a\x93\x50\x25\xea\x30\xe5\x47\xcd\xdd\x24\xda\x9c\xa4\xa2\xe3\x08\x44\x05\xb6\xc2\x9a\xd6\xfc\x7b\x33\x18\x4a\x39\x1f\x5e\xf9\xd7\x27\x6c\xff\x7c\xc2\xf6\xf6\xcf\x00\x00\x00\xff\xff\x91\x26\x0f\x38\xd8\x00\x00\x00")

func oauthOpenshiftOauthServerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_oauthOpenshiftOauthServerSecretYaml,
		"oauth-openshift/oauth-server-secret.yaml",
	)
}

func oauthOpenshiftOauthServerSecretYaml() (*asset, error) {
	bytes, err := oauthOpenshiftOauthServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/oauth-server-secret.yaml", size: 216, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x6f, 0x6a, 0x39, 0x24, 0x34, 0x35, 0x13, 0xce, 0x4d, 0x6a, 0x11, 0xab, 0x48, 0xe4, 0xb6, 0xc5, 0xa6, 0x88, 0xa0, 0xe5, 0xda, 0x2d, 0xb3, 0x69, 0xa5, 0x6f, 0x5e, 0x47, 0xb, 0x31, 0x64}}
	return a, nil
}

var _openshiftApiserverOpenshiftApiserverConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x8a\xc3\x30\x10\x84\xe1\x5e\x4f\x31\xb8\xd7\xc1\xc1\x55\x6a\xaf\xbe\xf6\xda\xb0\x48\x6b\x65\xb1\xbd\x12\xeb\x8d\x1b\xc7\xef\x1e\x52\x18\x52\x26\xf5\xcc\x07\x3f\x75\xf9\x67\x5b\xa5\x69\xc2\xf6\x1d\x26\xd1\x92\xf0\xdb\x74\x94\xfa\x47\x3d\x2c\xec\x54\xc8\x29\x05\x40\x69\xe1\x84\xd6\x59\xd7\xab\x8c\x1e\xa9\xcb\xca\xb6\xb1\x85\xf3\x41\xb5\x1a\x57\xf2\x66\x31\xcf\xc2\xea\x31\xd3\x57\x36\x4f\xb8\xc7\xb0\xef\x10\xcd\xf3\xad\xf0\xa5\x4f\x82\xc1\x5a\x3b\xf7\x01\x3f\x38\x8e\x00\xb0\xe7\xf2\xa9\x79\x36\x88\xd6\x17\x86\x37\xdc\x23\x00\x00\xff\xff\x7a\xe9\x92\xa8\xf8\x00\x00\x00")

func openshiftApiserverOpenshiftApiserverConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_openshiftApiserverOpenshiftApiserverConfigmapYaml,
		"openshift-apiserver/openshift-apiserver-configmap.yaml",
	)
}

func openshiftApiserverOpenshiftApiserverConfigmapYaml() (*asset, error) {
	bytes, err := openshiftApiserverOpenshiftApiserverConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-apiserver/openshift-apiserver-configmap.yaml", size: 248, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0xcc, 0xde, 0x8d, 0x8f, 0x8a, 0x7, 0x58, 0xad, 0xc9, 0xb7, 0x8a, 0x9, 0x53, 0xb6, 0x33, 0x82, 0xf4, 0xca, 0x9a, 0x1a, 0x2, 0xdc, 0xed, 0xd, 0xc4, 0xc1, 0x6f, 0xe, 0xd7, 0x6d, 0x4a}}
	return a, nil
}

var _openshiftApiserverOpenshiftApiserverSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xcb\x8a\x84\x30\x10\x45\xf7\xf9\x8a\xc2\x7d\x84\xd9\xe6\x37\x06\x66\x5f\x93\x5c\x67\x8a\x68\x19\x62\xb5\x20\xe2\xbf\x37\xf4\x03\x51\x5c\xf4\xfa\x9e\x73\x0f\x17\xf9\x41\x9d\x64\xd4\x40\xf3\x97\xcb\xa2\x29\xd0\x37\x62\x85\xb9\x01\xc6\x89\x8d\x83\x23\x52\x1e\x10\x68\x2c\xd0\xe9\x5f\x3a\xf3\x5c\x64\x42\x9d\x51\xdd\x9b\xc8\xb7\x5f\xc4\x51\x3b\xf9\x0b\xb4\xae\x54\xb2\x50\x23\x6a\xa8\xca\xbd\xe7\x34\x88\xb6\x3b\xd2\xd0\xb6\x39\xa2\xe7\x45\x1b\xab\xed\xce\x45\xc3\xef\xdc\x51\xcc\x58\x3e\x12\x33\x96\x97\x08\x8b\xc9\xc7\x5e\xa0\x76\xcc\x9e\x86\x0b\xfc\x10\x3b\x0d\x0f\xfc\x1e\x00\x00\xff\xff\x98\xe4\xc4\xc1\x4c\x01\x00\x00")

func openshiftApiserverOpenshiftApiserverSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_openshiftApiserverOpenshiftApiserverSecretYaml,
		"openshift-apiserver/openshift-apiserver-secret.yaml",
	)
}

func openshiftApiserverOpenshiftApiserverSecretYaml() (*asset, error) {
	bytes, err := openshiftApiserverOpenshiftApiserverSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-apiserver/openshift-apiserver-secret.yaml", size: 332, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x9a, 0x37, 0x82, 0x5, 0xd9, 0x47, 0x55, 0x16, 0x97, 0x53, 0xeb, 0x30, 0xf3, 0x26, 0xa, 0xb7, 0x2f, 0xef, 0xdd, 0xc8, 0xff, 0x63, 0x87, 0x32, 0xb2, 0x2d, 0x99, 0x3, 0x88, 0xbc, 0xb6}}
	return a, nil
}

var _openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x31\xae\xc2\x30\x0c\x00\xd0\xdd\xa7\xb0\xba\xe7\x4b\x5f\x62\xca\xca\xcc\xca\x8a\xac\xd4\x2d\x56\x13\x3b\x72\x4c\x97\xd2\xbb\xb3\xc0\xfc\x1e\x75\xb9\xb3\x0f\x31\xcd\xb8\xff\xc3\x26\x3a\x67\xbc\x9a\x2e\xb2\xde\xa8\x43\xe3\xa0\x99\x82\x32\x20\x2a\x35\xce\x68\x9d\x75\x3c\x65\x89\x54\x4c\xc3\xad\x56\xf6\xd4\x48\x69\x65\x87\x5f\x1d\xec\xbb\xe8\x9a\x0a\xfd\x15\x8f\x8c\xef\x04\xc7\x81\xa2\xa5\xbe\x66\x7e\xf4\x4d\x70\x72\xb3\xf8\xfa\x84\x78\xc1\xf3\x84\x4f\x00\x00\x00\xff\xff\x37\x27\x31\x15\x8c\x00\x00\x00")

func openshiftControllerManagerOpenshiftControllerManagerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml,
		"openshift-controller-manager/openshift-controller-manager-configmap.yaml",
	)
}

func openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml() (*asset, error) {
	bytes, err := openshiftControllerManagerOpenshiftControllerManagerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-controller-manager/openshift-controller-manager-configmap.yaml", size: 140, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0x40, 0x46, 0x8d, 0xfb, 0x27, 0x88, 0xe0, 0x11, 0x3, 0xdd, 0x8a, 0xf3, 0x85, 0xde, 0xd4, 0x96, 0x63, 0x31, 0x9f, 0xd6, 0xb2, 0x1d, 0xeb, 0xbb, 0x76, 0x1d, 0x54, 0x4e, 0x82, 0x41, 0x56}}
	return a, nil
}

var _openshiftControllerManagerOpenshiftControllerManagerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcd\xc1\xaa\x83\x30\x10\x85\xe1\x7d\x9e\x62\x70\x1f\xe1\x6e\xf3\x1a\x17\xee\x7e\x6e\x3c\xda\x21\x66\x22\xe3\x54\x10\xf1\xdd\x0b\x85\x22\xdd\x14\xba\x3f\xff\x77\x78\x91\x3f\xd8\x2a\x4d\x13\x6d\x3f\xa1\x88\x0e\x89\x7e\x91\x0d\x1e\x2a\x9c\x07\x76\x4e\x81\x48\xb9\x22\x51\x5b\xa0\xeb\x4d\x46\x8f\xb9\xa9\x5b\x9b\x67\x58\xac\xac\x3c\xc1\xc2\x6b\x5a\xee\xff\xc8\x4d\x47\x99\x12\x1d\x07\x2d\x45\xa8\x13\x75\x98\xf2\x1c\x79\xa8\xa2\xfd\x35\xe9\xe8\x3c\x03\xd1\x0a\xdb\x60\x7d\x36\xbf\x9a\x4f\x67\xf1\x0a\xde\x85\x82\xfd\x3b\xa1\x60\x7f\x0a\x8f\x00\x00\x00\xff\xff\x72\x5a\xe8\x81\x09\x01\x00\x00")

func openshiftControllerManagerOpenshiftControllerManagerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_openshiftControllerManagerOpenshiftControllerManagerSecretYaml,
		"openshift-controller-manager/openshift-controller-manager-secret.yaml",
	)
}

func openshiftControllerManagerOpenshiftControllerManagerSecretYaml() (*asset, error) {
	bytes, err := openshiftControllerManagerOpenshiftControllerManagerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-controller-manager/openshift-controller-manager-secret.yaml", size: 265, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x67, 0xfa, 0xd2, 0x95, 0xc5, 0x60, 0x3b, 0x8b, 0x8e, 0x72, 0xc0, 0x70, 0xc, 0x36, 0x24, 0x59, 0xb, 0x39, 0x65, 0x0, 0x21, 0xb0, 0x23, 0x38, 0xa1, 0x2a, 0xcc, 0x2f, 0x3d, 0xe9, 0xad}}
	return a, nil
}

var _openvpnDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x4a\x04\x31\x10\xc6\xf1\x3e\x4f\x31\x5c\x71\x5d\x32\xe5\x81\xad\x62\x77\x0a\x0b\x56\x6a\x31\x9b\x1d\x77\x23\xb3\x49\x98\x99\x08\xfb\xf6\xa2\xd8\x78\xcd\xaf\xf9\x3e\xfe\x8f\xd3\xf3\x15\x94\xd7\x62\xae\x47\xa2\x9c\xd9\x2c\x29\x2f\x1b\x79\xca\x6d\xc7\x31\x97\xcb\x0f\x61\x7a\x79\x82\x63\xec\x50\xaa\x39\x89\x40\x3c\x60\x73\xef\x76\x87\xb8\x48\xfa\xe0\xa5\x29\x75\x6d\x9f\x9c\x3d\x35\x5d\xb1\x8f\x19\xb9\xb3\xfc\x12\x95\x85\xc9\x38\x0a\x39\x9b\xc7\x4b\xaa\x8d\x34\x6f\x49\xfb\x0e\xe7\x33\xbc\x05\x00\xb8\xcd\xb7\xce\xf5\xab\xd7\xff\x7b\x16\xa6\x0a\x24\x12\xee\xaf\x0f\xf0\x7a\xc2\x61\x8a\x36\x97\x8a\x7f\xf7\xd3\x7b\xf8\x0e\x00\x00\xff\xff\xdc\x4c\x3d\x3a\xd4\x00\x00\x00")

func openvpnDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_openvpnDockerfile,
		"openvpn/Dockerfile",
	)
}

func openvpnDockerfile() (*asset, error) {
	bytes, err := openvpnDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/Dockerfile", size: 212, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xee, 0x52, 0x42, 0xf9, 0x39, 0x8f, 0x5d, 0x5, 0x7f, 0xb1, 0x6f, 0xcb, 0x5, 0x7e, 0x52, 0xf0, 0xec, 0x0, 0xae, 0xcd, 0x5f, 0x91, 0x7b, 0x36, 0xaf, 0x87, 0x5f, 0x67, 0x2b, 0x97, 0xfd}}
	return a, nil
}

var _openvpnClientConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\x0e\x82\x40\x10\x04\xd0\x7e\xbf\x62\x7f\x00\x1a\xbf\xc0\xc2\x56\xa9\xec\x8f\xbd\x29\x08\xe7\x1e\xd9\x5d\x2f\x12\xc2\xbf\x1b\x88\xa5\xdd\xcc\xbc\x64\xa4\x4c\xd0\xa0\x06\x1b\xf9\x42\x5a\xc7\x49\x33\x65\x34\x8e\xb7\x92\xe1\x55\x03\x9d\xc0\xa2\x8b\xe2\xec\xb0\x06\xfb\xcd\xbc\x6d\xdc\xdf\x3e\x01\xd3\x54\x1e\x0b\xf4\x39\xdc\xaf\x39\x1b\xdc\x79\xdf\xff\xe9\x50\x2d\x0e\x0a\x59\x48\x12\x4b\xea\xc5\x82\x8e\x77\x8e\xe2\x67\x99\xb1\x9e\x79\xc6\x4a\xdf\x00\x00\x00\xff\xff\xb2\x9d\x17\x18\x9b\x00\x00\x00")

func openvpnClientConfBytes() ([]byte, error) {
	return bindataRead(
		_openvpnClientConf,
		"openvpn/client.conf",
	)
}

func openvpnClientConf() (*asset, error) {
	bytes, err := openvpnClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/client.conf", size: 155, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x4b, 0xe0, 0xb8, 0xbe, 0xae, 0x60, 0x74, 0xfa, 0x4f, 0x3f, 0x1a, 0x80, 0xdb, 0xf9, 0xaa, 0xcf, 0x10, 0xe3, 0xea, 0x85, 0xab, 0x23, 0xfa, 0x1e, 0xab, 0x8f, 0x81, 0x95, 0xa8, 0x72, 0x55}}
	return a, nil
}

var _openvpnOpenvpnCcdConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xa1\x0e\xc2\x40\x0c\x06\x60\xdf\xa7\xf8\x33\xbf\x10\x12\x54\x2d\x1a\x8b\x6f\xee\x0a\x69\xc6\xda\xe6\x18\x43\x8c\x7b\x77\x04\x4c\x7f\x9f\xa4\x5d\xb5\x3d\x2d\x9c\xb1\x1e\x69\x32\xaf\x8c\x73\xf8\xcd\xee\x17\x49\x9a\x75\x91\x2a\x8b\x30\x01\x2e\xb3\x32\x22\xd5\xd7\xf4\xb1\x94\x4a\xbb\xbc\xa3\x4d\xda\x18\x9f\x91\xb6\x0d\xe6\xe5\xf1\xaa\x8a\xe1\x5f\x0f\x3f\x1e\x70\x42\xef\xf4\x0d\x00\x00\xff\xff\x28\x23\x59\xa6\x71\x00\x00\x00")

func openvpnOpenvpnCcdConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnCcdConfigmapYaml,
		"openvpn/openvpn-ccd-configmap.yaml",
	)
}

func openvpnOpenvpnCcdConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnCcdConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-ccd-configmap.yaml", size: 113, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x8, 0x5b, 0xc9, 0x1, 0x28, 0xac, 0xcd, 0x8c, 0x4d, 0x30, 0x73, 0x86, 0x82, 0x43, 0x73, 0xdb, 0xd8, 0x68, 0x2a, 0x2, 0x20, 0x1, 0xcf, 0xb3, 0x16, 0xb6, 0xbf, 0x64, 0xf7, 0x14, 0xac}}
	return a, nil
}

var _openvpnOpenvpnClientConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x0b\xc2\x30\x10\xc5\xf1\xfd\x3e\xc5\xa3\x7b\x15\xc1\xe9\x56\x67\x57\xf7\x33\xb9\xca\xd1\xe6\x12\x4c\x5a\x90\xda\xef\xee\x60\x05\xd7\xc7\xef\xfd\xa5\xd8\x4d\x9f\xd5\xb2\x33\x96\x13\x8d\xe6\x91\x71\xc9\x3e\xd8\xe3\x2a\x85\x92\x36\x89\xd2\x84\x09\x70\x49\xca\xc8\x45\x7d\x29\xde\x87\xc9\xd4\xdb\x3e\xd7\x22\x41\x19\xe3\x7c\xd7\xbe\xbe\x6a\xd3\x44\xbf\xd7\xd7\x1d\x42\xf6\x81\xf1\xee\x69\x5d\x61\x1e\xa6\x39\x2a\xba\xbd\x75\xfc\x33\x1d\xce\xd8\x36\xfa\x04\x00\x00\xff\xff\x2d\x14\xb2\x7d\x97\x00\x00\x00")

func openvpnOpenvpnClientConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnClientConfigmapYaml,
		"openvpn/openvpn-client-configmap.yaml",
	)
}

func openvpnOpenvpnClientConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-configmap.yaml", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xdf, 0x5e, 0xae, 0x24, 0xae, 0xdf, 0xfd, 0xf, 0xee, 0x5d, 0xa0, 0xfa, 0x47, 0x9b, 0x22, 0x34, 0x20, 0x94, 0x34, 0x9d, 0x2f, 0x93, 0x5c, 0x2, 0x2d, 0x29, 0x3e, 0x83, 0x45, 0x8f, 0x79}}
	return a, nil
}

var _openvpnOpenvpnClientDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4b\x6f\xdb\x3c\x10\xbc\xeb\x57\xec\x87\xef\x4c\xab\x0e\x9a\xa2\xe5\xcd\x48\x82\xa2\x40\x1c\xbb\x4e\x9c\x3b\x4d\xad\x6d\xd6\x7c\x85\x0f\x27\x82\x9b\xff\x5e\x50\x92\x65\xc9\x8f\xf4\x58\x9d\xc8\xd9\x9d\xdd\x99\x15\xc9\x8d\xd0\x05\x85\x5b\xb4\xd2\x94\x0a\x75\xc8\x98\x15\xcf\xe8\xbc\x30\x9a\x02\xb3\xd6\xe7\xdb\x61\xa6\x30\xb0\x82\x05\x46\x33\x00\xcd\x14\x52\x30\x16\xf5\xd6\x6a\xc2\xa5\x48\xa4\x1a\xf6\x96\x71\xa4\xb0\x89\x0b\x24\xbe\xf4\x01\x55\xe6\x2d\xf2\xc4\x72\x68\xa5\xe0\xcc\x53\x18\x66\x00\x1e\x25\xf2\x60\x5c\x8a\x00\x28\x16\xf8\xfa\x9e\x2d\x50\xfa\x1a\x80\xd4\xf8\x4c\x8f\x80\xca\x4a\x16\xb0\xa1\x75\x44\xa5\x4f\xf6\x2a\x5c\xaa\x01\xb0\x97\x54\xe5\xc4\x60\x94\x89\x3a\x3c\xa2\xdb\x0a\x8e\x23\xce\xd3\xee\xc9\x6c\x50\x53\x58\x32\xe9\xb1\xc9\xe4\x46\x07\x26\x34\xba\xb6\x03\xb9\x34\x8a\xfa\x13\x8a\xad\x90\xc2\x4b\x64\xe5\x40\x98\x7c\x5d\x5a\x74\x7e\x2d\x96\x21\x6f\x08\x34\x59\xf1\x47\x84\x69\x94\x72\x6a\xa4\xe0\x25\x85\x91\x7c\x65\xa5\x6f\xe3\xdc\x28\xc5\x74\x71\x30\x48\x20\x5f\x08\x9d\x2f\x98\x5f\x1f\x4c\xbb\x95\xef\x66\x10\xde\xd9\xfc\x26\xed\x06\xe0\xff\xff\x4e\xd9\xe9\xcf\x04\x20\x18\x3b\x88\xb0\x81\x2d\x24\x7a\x20\x01\x34\x0b\x40\x46\x30\x9d\x3c\x3e\xcd\x26\xf3\xa7\x1f\x0f\xdf\x81\x78\x18\x7e\xbb\x1a\x0c\xbf\x7c\x1d\x5c\x5d\x5f\x0f\x3e\xe5\x57\x9f\x81\xfc\x82\xf1\xe8\xf1\xe7\xfc\x6e\x36\xba\xbd\xeb\x94\xc2\x37\xe4\x90\x47\xef\x72\x9f\x5a\x37\x73\x00\x42\xb8\xd1\x4b\xb1\x82\x1c\x03\xcf\xdb\x71\x56\x58\x5e\x4f\x75\x90\x76\x6d\xa5\x57\xe3\x36\x42\xaf\x6e\x85\xa3\x3d\x4e\x76\x70\xc1\xa3\x13\xa1\xbc\x31\x3a\xe0\x5b\xa0\x1d\x0d\xd6\x89\xad\x90\xb8\xc2\x82\x42\x70\x11\xb3\xdd\x0e\xc4\x12\x06\x13\x8b\xfa\x79\xfa\x70\x53\xb5\x9b\xa1\x37\xd1\x71\xf4\xf0\xfe\xde\x72\xdd\x1e\xa4\xbb\x1d\x38\xa6\x57\xf8\x01\xeb\x90\xb2\x47\x67\xf8\x12\xd1\x87\x6e\xc5\x54\xb3\x02\x3d\x85\x46\xc6\xcd\x74\xde\xcf\x00\xe0\x36\x56\xe1\x26\xb6\xdb\x01\xea\xa2\x5e\x24\xc6\x18\x95\x71\xe5\x31\x49\x55\x68\xcd\x6b\x33\xba\xd4\x76\x71\x24\xf3\x5e\x28\x71\x24\x52\x26\xe8\x5f\x4a\xac\x17\xd9\x61\xb5\x2f\xb1\x35\x32\x2a\x1c\xa7\x2b\xdb\x3b\xf5\xd5\x95\x9e\xb2\xb0\xbe\x70\x3e\xf6\xaf\x98\x47\xee\x30\xfc\x9d\xd8\x1c\xc6\x13\xfe\x11\xdc\xe7\x4b\xb1\xc8\x95\x29\xa2\x44\x7f\x42\x5c\x1b\x1f\xc8\x69\xd0\x21\x2b\x26\x5a\x96\xcd\xd1\xec\x9a\xec\x3c\x3b\xb5\x6a\xda\xbb\xb5\x09\x79\xf8\xe8\x39\x3a\x63\x98\x9c\x77\x51\x6f\xc7\xcc\xd2\x13\xd9\x67\x6b\x93\xca\x4d\x65\xba\x7b\xcf\x2e\x0f\xe1\xcc\x08\xfe\x04\x00\x00\xff\xff\x8a\x97\x93\x94\x86\x06\x00\x00")

func openvpnOpenvpnClientDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnClientDeploymentYaml,
		"openvpn/openvpn-client-deployment.yaml",
	)
}

func openvpnOpenvpnClientDeploymentYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-deployment.yaml", size: 1670, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xb6, 0xf1, 0x85, 0x33, 0x4e, 0x73, 0xfd, 0xae, 0x37, 0xa5, 0xbe, 0x6a, 0xfb, 0x29, 0x25, 0xb, 0x1f, 0xfb, 0x85, 0x3, 0xe7, 0x1d, 0x33, 0x7a, 0x7e, 0xbd, 0x9a, 0x36, 0x6c, 0x84, 0x1d}}
	return a, nil
}

var _openvpnOpenvpnClientSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\xc1\x4a\xc5\x30\x10\x45\xf7\xf9\x8a\xe1\xed\x23\xb8\xcd\xd6\xb5\x2b\xc1\xfd\x98\x37\x95\x90\x66\x12\x32\xd3\x4a\xa9\xfd\x77\x49\x63\x21\x8a\x60\x36\x81\x3b\xf7\xdc\x83\x25\xbc\x52\x95\x90\xd9\xc1\xfa\x68\x62\xe0\xbb\x83\xa7\xcc\x53\x78\x7f\xc6\x62\x12\x29\xde\x51\xd1\x19\x00\xc6\x44\x0e\x16\xa1\x6a\x13\x72\x98\x48\xd4\xe6\x42\xbc\x16\xb6\x7e\x0e\xc4\x6a\x85\x7c\x25\x35\x17\x71\xfe\xf0\x69\x00\x00\x7e\x89\x5a\xd4\x65\x2f\x9d\x69\xc1\x68\x6b\xaf\x1b\x7f\x3a\x86\x93\x14\xf4\xe4\x20\x2e\x6f\x64\x65\x13\xa5\x74\x1e\xc7\x05\x9d\xe5\xc1\x57\x75\xb0\xef\x50\x62\x80\xdb\x35\xf6\x91\x6b\xa4\xfa\xbd\xd9\x2a\x37\x38\x8e\x01\x8a\xb4\xfd\x07\x45\xda\x06\xc8\xe3\xdf\xa2\x9e\x9f\xc5\xaf\x00\x00\x00\xff\xff\x98\x2e\x6c\xc4\x6c\x01\x00\x00")

func openvpnOpenvpnClientSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnClientSecretYaml,
		"openvpn/openvpn-client-secret.yaml",
	)
}

func openvpnOpenvpnClientSecretYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-secret.yaml", size: 364, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x7e, 0x7d, 0x9a, 0x8d, 0x44, 0x93, 0xe3, 0x4b, 0x85, 0x86, 0x18, 0x4d, 0x67, 0x18, 0xc0, 0xec, 0x2d, 0x77, 0xef, 0xd1, 0x69, 0xd9, 0x9f, 0x7f, 0x5f, 0x49, 0x7a, 0xde, 0x62, 0xe0, 0x5f}}
	return a, nil
}

var _openvpnOpenvpnServerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8b\xb1\x0a\xc2\x40\x10\x05\xfb\xfd\x8a\x47\xfa\x28\x82\xd5\xb6\xd6\xb6\xf6\x4b\x6e\x23\x8b\xe6\xdd\x71\x89\xd7\xc4\xfc\xbb\x85\x0a\x29\x87\x99\xb1\x12\x37\xaf\x73\x64\x2a\xda\x49\x1e\xc1\xa4\xb8\x64\x8e\x71\xbf\x5a\x91\xc9\x17\x4b\xb6\x98\x0a\x40\x9b\x5c\x91\x8b\xb3\x15\xf6\xb3\xd7\xe6\x55\xfe\xf2\x8b\x87\x21\x73\x54\xbc\x7b\x59\x57\x04\x87\xe7\x2b\x39\xba\xdf\x72\xdc\x35\x1d\xce\xd8\x36\xf9\x04\x00\x00\xff\xff\x2d\x4d\xb6\x3b\x7e\x00\x00\x00")

func openvpnOpenvpnServerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnServerConfigmapYaml,
		"openvpn/openvpn-server-configmap.yaml",
	)
}

func openvpnOpenvpnServerConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-configmap.yaml", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x8d, 0x54, 0xac, 0x3a, 0x87, 0x30, 0x0, 0xa8, 0xf2, 0x87, 0x2c, 0x62, 0xaf, 0x4b, 0xb7, 0x3e, 0x19, 0x78, 0x60, 0xe1, 0x7a, 0x3e, 0x3a, 0x92, 0x2e, 0x50, 0x45, 0x4c, 0xe1, 0xc9, 0x24}}
	return a, nil
}

var _openvpnOpenvpnServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x3d\x6f\xe3\x30\x0c\xdd\xf3\x2b\x88\xee\xae\xd1\x55\x5b\xd1\x8c\x4d\x2e\x48\xef\xba\xab\x32\xe3\x08\xd1\x57\x25\xca\x3d\xc3\xe8\x7f\x3f\xc8\xdf\x76\x72\xc1\x6d\xe7\xc9\x7e\xe4\x7b\x7a\xa4\x49\x5d\xa4\x29\x18\x6c\xd1\x29\x5b\x6b\x34\xb4\xe1\x4e\xbe\xa3\x0f\xd2\x1a\x06\xdc\xb9\x90\x57\x4f\x1b\x8d\xc4\x0b\x4e\x9c\x6d\x00\x0c\xd7\xc8\xc0\x3a\x34\x95\x33\x59\x40\x5f\xa1\xdf\x04\x87\x22\x05\x3d\x3a\x25\x05\x0f\x0c\x9e\x36\x00\x01\x15\x0a\xb2\x3e\x45\x00\x34\x27\x71\x7e\xe5\x1f\xa8\x42\x07\x40\xd2\xbf\x92\x02\x20\xd4\x4e\x71\xc2\x9e\x36\x3b\x3b\x3d\x6a\xa1\x70\x5b\xa3\x69\x40\x9e\xe0\xf1\x88\x81\xb8\xa7\x2d\x27\x84\xef\xef\xe1\x4c\x63\x2c\x71\x92\xd6\xcc\x44\x12\x3f\x9c\xe5\x89\x1e\xa5\xcd\x7d\x47\xc3\xe2\x99\x18\x3c\x34\xcd\x5a\xe8\x21\xe9\xa3\x29\x06\xcd\xa1\xf8\x56\x3d\x92\xd5\x36\x1a\x7a\x43\x5f\x49\x81\xcf\x42\xa4\xaf\x9f\xf6\x82\x86\xc1\x89\xab\x80\x7d\xa6\xb0\x86\xb8\x34\xe8\x47\x1b\xd9\xed\xde\x0e\x1e\xa5\xe6\x25\x32\xf8\x8c\xbc\x4e\x2e\xcf\xb5\x43\xdf\x7a\xce\x7b\x02\x4b\x4d\x0b\xb4\x24\x1c\xa2\x52\x07\xab\xa4\xa8\x19\x3c\xab\x2f\x5e\x87\x31\x2e\xac\xd6\xdc\x14\x53\x17\x32\xc8\x63\xf0\x79\xf8\x90\x66\xd0\x9c\xda\xec\xcb\x30\xcf\xcc\x32\x61\xcd\x49\x96\x73\x32\x92\x18\x78\x79\x17\xcd\xbb\x1a\x1e\xd3\xd7\x98\xf9\x65\xfd\x45\x9a\x72\x2b\x3d\x5b\x72\x56\x05\x07\x14\xd1\x4b\xaa\x5f\xac\x21\xfc\x4d\xd3\xe9\x00\xce\xcb\x4a\x2a\x2c\xb1\x60\x40\x3e\xe2\xf0\xc7\x7f\x38\x34\xef\x87\xfd\x5b\x2b\x74\xc4\x60\xa3\x17\x18\xa6\x9f\x9f\x26\xb4\x07\x59\xd3\x80\xe7\xa6\xc4\x3b\xac\x29\x65\x40\x8f\xf8\x19\x31\xd0\x5c\x31\x69\xb6\x60\x60\xd0\xdb\x78\x39\xfc\x5a\x66\x00\x08\x17\xdb\x70\x1f\x1b\x27\xa8\x67\xec\x50\x5b\x5f\xaf\x49\xba\x45\x3b\xde\x98\x31\xa7\x8e\x2f\x2b\x9b\xaf\x52\xcb\x95\x49\x95\xa0\xff\x69\xb1\xdf\x98\xe5\xee\xa4\xa7\xb2\x2a\x6a\xdc\xa5\x3d\x59\x8c\x58\xbb\x47\x07\x4e\xe7\xfb\x63\x32\x5c\x49\x2b\xf8\xef\x7c\x21\x8a\x2b\xf2\x1c\xbb\xc3\x5c\x8e\xfc\x48\x9e\xc3\x61\xb1\xf8\xfb\x36\x61\x5a\xa4\xae\xd6\xd9\xca\x07\x14\x1e\x17\xb3\xdd\x21\xfb\x7b\x57\xc1\x8d\x82\xb3\xde\xc5\x8e\x3b\x76\x65\xf0\xae\xcc\xc2\xfd\x3f\xc9\xcc\x9b\x35\xb5\xef\x4f\x00\x00\x00\xff\xff\x73\xa0\x9c\xa9\x4a\x06\x00\x00")

func openvpnOpenvpnServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnServerDeploymentYaml,
		"openvpn/openvpn-server-deployment.yaml",
	)
}

func openvpnOpenvpnServerDeploymentYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-deployment.yaml", size: 1610, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xca, 0xac, 0x10, 0xe7, 0x23, 0x21, 0xaa, 0xa9, 0x2e, 0x3a, 0x40, 0x55, 0xcb, 0x19, 0x8a, 0xc0, 0xbd, 0x1, 0x50, 0xf4, 0x60, 0x5d, 0xe7, 0xe8, 0x66, 0x4, 0x7c, 0xd5, 0xb7, 0xba, 0xb0}}
	return a, nil
}

var _openvpnOpenvpnServerSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\x31\x74\x6f\xc1\x6d\xae\x21\xb8\x1f\x92\x07\x86\x98\x74\x98\x0c\x81\x52\x7a\x77\xd1\xc6\x85\xa8\xdb\xf7\x7f\x3c\x96\x74\x85\xb6\xb4\x54\x4f\xfd\xec\x72\xaa\xd1\xd3\x05\x41\x61\xae\xc0\x38\xb2\xb1\x77\x44\x95\x0b\x3c\x2d\x82\xda\xa5\x9e\x1a\xb4\x43\xdd\x3b\xda\xbd\xcd\x41\xcd\xd3\xb6\x91\xe4\x44\xd3\xa7\x7b\xb6\x89\xf6\x7d\xc8\x8c\xf5\xaf\xcc\x58\x87\x0c\xfc\xfb\xf2\xd8\x07\x8a\xb7\x59\x50\xbe\xd1\xb1\xbf\xd0\x23\x00\x00\xff\xff\x79\x94\xfb\xa8\xe1\x00\x00\x00")

func openvpnOpenvpnServerSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnServerSecretYaml,
		"openvpn/openvpn-server-secret.yaml",
	)
}

func openvpnOpenvpnServerSecretYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-secret.yaml", size: 225, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xea, 0xb1, 0x7, 0x30, 0xc3, 0x28, 0x4b, 0x29, 0x8c, 0x76, 0xfd, 0xae, 0xbb, 0xe5, 0xe8, 0xf7, 0x5c, 0x60, 0x71, 0xdc, 0xda, 0xc5, 0x22, 0x6a, 0x54, 0x4a, 0x6, 0x91, 0xaf, 0xb9, 0x58}}
	return a, nil
}

var _openvpnOpenvpnServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x6a\xc3\x40\x0c\x45\xf7\x73\x8a\x7f\x01\x17\x0c\xdd\x54\xdb\xee\x5d\x43\x8b\xf7\xc3\x58\x94\x21\xf6\x48\x68\xc4\x40\x30\xbe\x7b\xb0\x93\x2c\x42\x76\x8f\x27\x3d\xf8\x51\xf3\xc4\x56\xb3\x14\x42\xeb\xc3\x25\x97\x99\xf0\xcb\xd6\x72\xe2\xb0\xb2\xc7\x39\x7a\xa4\x00\x94\xb8\x32\x41\x94\x4b\xd3\xd2\x55\xb6\xc6\x16\xaa\x72\x3a\x8e\x2a\xe6\xf5\x80\xee\x44\x42\xdf\x7f\x7d\x06\x00\x50\x13\x97\x24\x0b\xe1\xef\x7b\x3c\x8d\x47\xfb\x67\x1f\x5f\xdf\x8a\xcc\x7c\x57\xdb\x86\x8f\x1f\xe5\x32\x8d\xc3\xf0\x90\xd8\xf7\x00\x54\x5e\x38\xb9\x18\x9d\x41\x54\x7d\x5b\x03\xf8\x55\x99\xf0\xec\xc2\x2d\x00\x00\xff\xff\xac\xda\x12\xe1\xdd\x00\x00\x00")

func openvpnOpenvpnServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnServerServiceYaml,
		"openvpn/openvpn-server-service.yaml",
	)
}

func openvpnOpenvpnServerServiceYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-service.yaml", size: 221, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x72, 0x30, 0x6c, 0x85, 0xd5, 0xf1, 0xaf, 0xf7, 0xe0, 0x29, 0xe7, 0xb1, 0x85, 0xf7, 0xe5, 0x9d, 0xcc, 0x47, 0xd1, 0xb1, 0xf6, 0x3d, 0x5c, 0xfa, 0x9d, 0xf7, 0x63, 0xea, 0xda, 0x76, 0xa}}
	return a, nil
}

var _openvpnOpenvpnServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xe1\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x28\x2b\xc8\xe3\x02\x04\x00\x00\xff\xff\x96\xd1\x69\xeb\x3a\x00\x00\x00")

func openvpnOpenvpnServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_openvpnOpenvpnServiceaccountYaml,
		"openvpn/openvpn-serviceaccount.yaml",
	)
}

func openvpnOpenvpnServiceaccountYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-serviceaccount.yaml", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xbc, 0x74, 0x19, 0xab, 0x3f, 0xfe, 0x80, 0x4e, 0x4a, 0x1a, 0x5c, 0x50, 0x82, 0xca, 0xc0, 0xdc, 0x8f, 0xd0, 0x39, 0xf3, 0x74, 0xb1, 0xe6, 0x14, 0xa9, 0x5a, 0xf3, 0xe, 0xab, 0x5d, 0xdf}}
	return a, nil
}

var _openvpnServerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x50\xcb\x6e\xdb\x30\x10\xbc\xef\x57\x2c\xac\x6b\xf5\x4a\x9b\xa0\xb9\x36\xee\xa1\xa7\x04\x6e\x7f\x80\x21\xd7\x12\x21\x8a\x4b\x90\x4b\xb9\x6a\x90\x7f\x2f\x24\x47\x40\x8c\xba\x40\x7b\x90\x30\x9c\x07\x31\xc3\x44\x71\xa2\x88\xed\xfd\x4d\xd5\xde\x7d\xae\x6e\x6e\x6f\xab\x06\x97\xff\xf6\x35\x30\x51\x7c\xc6\x8f\xa0\x15\x6a\x55\xe9\x28\xa0\x29\x0a\x8a\x4b\xeb\x61\xa0\x79\xc5\x03\xcd\x60\x7a\x34\x7d\x15\x68\x84\xe2\xc7\xe3\xfe\x11\x8f\xb6\xcb\x91\x90\xb3\x60\xcf\x27\x14\xc6\x8e\x3c\x45\x25\x84\xd2\xdb\x84\x27\x2b\xfd\x22\x7a\x22\x63\x7d\x87\xd2\x13\x72\x20\x3f\x05\x8f\x9a\xc7\x51\x79\x83\xf6\x88\x81\x53\xb2\xcf\x8e\xa0\x10\x97\x4a\x95\xa5\xc7\x9a\x44\xd7\x6f\xd6\x3a\x0c\xb6\x16\xb5\x36\x28\x06\x9a\x4b\x63\x23\x69\xb1\xec\xb1\x81\x81\x28\x28\x67\x27\xc2\xb6\xc1\xbb\x06\x02\xc5\x64\x93\x94\x8b\x79\xc3\x92\x3d\x40\x88\x2c\x8c\xa2\x03\x14\x78\x20\x37\x23\x7b\xdc\xb3\x1e\x28\x2e\xbd\x0d\x63\xe0\x28\x38\xaa\x10\xac\xef\x3e\xa0\xf5\x42\xd1\x2b\xe7\x66\x54\xee\xa4\xe6\x84\x6d\x7b\xff\x09\x56\xd3\x8a\x0c\x4d\x28\xd9\x37\x90\x44\x49\x4e\x58\xcb\x18\xb6\xc6\xe5\x99\xab\x1c\x77\x00\x9a\xc7\x50\xba\x5f\x8c\x9e\x01\xb4\xb3\xe4\xa5\xd4\xec\x8f\xb6\x5b\x86\x5c\x2e\xd5\xda\x00\x14\x45\x81\x07\xce\x42\xf8\xb0\xda\x72\x54\xcb\xd8\x84\x5f\xc8\xf1\x09\xe2\x2a\xbd\xbc\xa0\x32\x26\x52\x4a\x58\x3d\xb1\x79\xf8\xb6\x3f\xe0\xeb\xeb\x42\x8f\x2a\x0d\xef\xb9\x2b\x81\xef\x14\x27\xab\xe9\x8f\xd0\x25\x0f\xe7\x2a\x4f\x39\xf5\xd7\x9b\x84\x45\xd9\xbd\xdb\xb7\x3b\x27\xbe\xfe\x94\xa8\xae\x47\x4c\x0e\xce\x6a\x25\x54\x6a\xbf\x3d\x86\x70\x79\x46\x6f\x17\xfe\xef\xc0\xdd\x5f\x73\xff\xb6\x73\x07\xbf\x03\x00\x00\xff\xff\x83\x12\xec\x88\x25\x03\x00\x00")

func openvpnServerConfBytes() ([]byte, error) {
	return bindataRead(
		_openvpnServerConf,
		"openvpn/server.conf",
	)
}

func openvpnServerConf() (*asset, error) {
	bytes, err := openvpnServerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/server.conf", size: 805, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xc5, 0x52, 0x73, 0x59, 0x47, 0xa4, 0xdf, 0xbc, 0x1a, 0xb1, 0x83, 0x86, 0xfc, 0x10, 0x29, 0x47, 0xa7, 0x2, 0x57, 0x4d, 0x6f, 0xbc, 0xae, 0xd4, 0x1e, 0xb7, 0x27, 0xe3, 0xa6, 0x26, 0xc}}
	return a, nil
}

var _openvpnWorker = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x2c\xca\x2f\x2d\x49\x55\xa8\xae\x56\x48\x4c\x49\x29\x4a\x2d\x2e\x56\xd0\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\xf6\x74\x09\x52\xa8\xad\x05\x49\xe5\x26\x16\x67\xa3\x8b\x73\x61\xd1\x19\x90\x9f\x82\xa1\x0b\x21\xc6\x05\x08\x00\x00\xff\xff\xa6\xfb\xf5\x9b\x6c\x00\x00\x00")

func openvpnWorkerBytes() ([]byte, error) {
	return bindataRead(
		_openvpnWorker,
		"openvpn/worker",
	)
}

func openvpnWorker() (*asset, error) {
	bytes, err := openvpnWorkerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/worker", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x6a, 0x88, 0x78, 0x3a, 0x72, 0x67, 0xe5, 0x6c, 0x6b, 0x26, 0xbc, 0x19, 0x44, 0xaf, 0x10, 0x94, 0x1e, 0xa9, 0x2b, 0xca, 0xd0, 0x56, 0x42, 0x54, 0xa7, 0x30, 0x93, 0x74, 0x34, 0xf3, 0x73}}
	return a, nil
}

var _registryClusterImageregistryConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x22\xfb\xe5\x2e\x37\x6a\xbd\x1b\x9a\xa1\x68\x9a\x04\xed\x4c\xd8\xb4\x42\xd4\xa6\x54\x8a\x6a\xe3\x06\xf9\xef\x85\xec\x20\xe9\xd8\xa1\x9b\xde\xe3\xd3\xf7\x1e\x26\x7e\x22\xcd\x1c\xc5\x03\x0f\x18\x48\x29\x70\x36\x1d\x97\x31\x91\xa2\x45\xad\x0f\xc9\x07\xee\x6c\xc9\xf1\xf7\xdb\xca\xbd\xb0\xb4\x1e\xfe\x45\xe9\x38\xb8\x81\x0c\x5b\x34\xf4\x0e\xa0\x63\xc1\x9e\x3f\x48\x73\x55\xbf\xbe\xc5\xbb\xfe\x71\x00\x82\x03\x79\x68\xfa\x92\x8d\xd4\xe5\x44\x4d\xe5\xb4\xd4\x61\xe9\x6d\x1b\x8b\x91\x87\x0e\xfb\x4c\x0e\xe0\x60\x96\x76\xd4\x28\x99\x87\xd3\x09\x96\xeb\xda\xb5\xbd\x74\xdd\xed\xf7\x9b\xf9\x08\xe7\xb3\x03\xe8\x63\x08\x2c\xc1\xc3\x5f\x07\x30\xa0\x60\xa0\x81\xc4\x76\x86\x15\x79\x3f\x19\xad\x03\x48\x1a\x8f\x63\xed\x9c\xf9\x1e\x16\x8b\xab\xc8\x57\x25\x71\x33\xe5\x66\xad\x84\xed\x83\xf4\xe3\x6d\x9a\x52\xea\xb9\xc1\xec\x61\x35\xa9\xd7\x42\xd9\xf2\x8c\xad\xe9\xf9\x55\x87\x1c\xd7\xf2\x58\xa8\x90\x87\x3f\x37\x6f\x5b\x44\xa6\xb1\x5f\xbc\x67\x64\xbb\x65\xf3\x74\x78\x57\x36\xfa\x11\x56\xb6\xa8\x18\x2e\x2c\x1a\x92\x8d\xff\x59\x3d\x9c\xce\xee\x33\x00\x00\xff\xff\x25\x21\xaa\x2d\x1e\x02\x00\x00")

func registryClusterImageregistryConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_registryClusterImageregistryConfigYaml,
		"registry/cluster-imageregistry-config.yaml",
	)
}

func registryClusterImageregistryConfigYaml() (*asset, error) {
	bytes, err := registryClusterImageregistryConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registry/cluster-imageregistry-config.yaml", size: 542, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x9c, 0x20, 0xe7, 0x85, 0x7c, 0x60, 0x55, 0x27, 0x97, 0xd2, 0x53, 0x9f, 0x3c, 0xc3, 0xae, 0xa8, 0x1a, 0xf4, 0xc0, 0x4a, 0xdd, 0x96, 0xac, 0xf7, 0x29, 0xae, 0xed, 0x1f, 0x4f, 0x61, 0xee}}
	return a, nil
}

var _routerProxyClientConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x4d\x0a\xc2\x40\x0c\x05\xe0\x7d\x4e\x91\x0b\x8c\x52\x74\xe3\x71\xda\xf4\x2d\x4a\xc7\xcc\x90\x79\x06\x7a\x7b\xf1\x0f\xdc\x7e\xf0\x59\xdd\xe0\x94\x44\x2c\x7a\x11\x6f\xcb\xe6\xab\xac\x48\xe5\xc3\x25\x70\x6f\x44\x31\x04\x0b\xeb\xd0\x81\x48\xc4\x97\xb5\x75\x78\x76\x2f\x1f\xd5\x69\xba\x5d\x95\xd6\xc5\x66\x1d\xb0\x00\xcf\x36\x9f\x2c\x28\xaf\xff\x23\xd6\xf1\xb6\x1d\xc7\x3f\xed\x38\xe4\x19\x00\x00\xff\xff\xa7\x87\x5c\x3d\x8b\x00\x00\x00")

func routerProxyClientConfBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyClientConf,
		"router-proxy/client.conf",
	)
}

func routerProxyClientConf() (*asset, error) {
	bytes, err := routerProxyClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/client.conf", size: 139, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0x8, 0xb0, 0xe0, 0x97, 0xc0, 0xab, 0x13, 0xb5, 0xad, 0xd4, 0x9a, 0xe2, 0xe2, 0x44, 0xd4, 0x34, 0x9d, 0xd7, 0x88, 0xfc, 0x56, 0xf1, 0x2b, 0x6b, 0xf7, 0x5d, 0x1e, 0x36, 0x47, 0x14, 0xe8}}
	return a, nil
}

var _routerProxyHaproxyCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x4b\xc4\x30\x10\x86\xef\xf3\x2b\xe6\xe0\x55\x88\xec\x8a\x65\xaf\xd2\xc3\x9e\x94\xfa\x71\x0d\x69\x3a\xd5\x60\x9a\xe8\xcc\x44\x04\xf1\xbf\x4b\xb0\xa0\x6b\xa5\xee\xf5\x99\x79\x9f\x64\xde\x87\x98\x7b\x17\x01\x71\x72\x6f\x3e\xa7\x84\x17\xc6\x18\x80\x81\x46\x57\xa2\x4a\x1d\xe4\x81\x50\xfd\x33\x20\x6a\x98\x28\x17\x45\x1f\x03\x25\xc5\x33\x33\xfd\x80\x42\xfc\x4a\xfc\x0b\x56\x25\xf9\xba\x2a\x8b\xfc\xe9\x18\x12\x9e\xcb\x42\xb1\xe4\x2f\x85\x0a\x7d\x21\x26\xe5\x40\x82\x1b\x80\x91\x73\x52\x4a\x03\xc6\xec\x5d\xb4\x9c\x8b\x12\xdb\x47\xd5\xfa\xd5\x3e\xa4\x01\x77\x8d\x69\x0c\x20\xce\xd7\xd8\xde\xf9\xa7\x1a\x60\x9a\xb2\xd2\x41\x62\xc5\x26\xdf\xba\xed\x76\x73\x94\x4e\x00\x56\xde\x3a\xe8\x74\xae\x6d\x5e\xab\x73\x3c\x79\xef\xae\xee\x6e\xdb\xce\xde\xb4\xdd\xfd\xfe\xb2\xb5\xfb\xeb\x8f\x5d\x63\xd6\x9c\xf2\x9f\x54\xfe\xb6\xd6\x83\x3e\x03\x00\x00\xff\xff\x53\x33\x08\x81\x03\x02\x00\x00")

func routerProxyHaproxyCfgBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyHaproxyCfg,
		"router-proxy/haproxy.cfg",
	)
}

func routerProxyHaproxyCfg() (*asset, error) {
	bytes, err := routerProxyHaproxyCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/haproxy.cfg", size: 515, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xd4, 0xd2, 0xe3, 0xbd, 0xa8, 0xe3, 0x3d, 0x51, 0xef, 0x3c, 0x6a, 0x92, 0x15, 0xde, 0xdb, 0xa1, 0x3a, 0x81, 0x88, 0x5f, 0x6c, 0x38, 0x6e, 0x47, 0x33, 0xd2, 0x8a, 0xb2, 0x6f, 0x46, 0xf2}}
	return a, nil
}

var _routerProxyRouterProxyConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\x0a\xc2\x30\x10\x87\xf1\xfd\x9e\xe2\x4f\xf7\x28\x82\xd3\xad\xce\xae\xee\x47\x72\xad\x87\xf6\x12\x62\x2a\x4a\xed\xbb\x0b\x85\x42\xd7\x8f\xef\xf7\x30\x4f\x8c\x4b\xf6\xde\x86\xab\x14\x92\x62\x37\xad\x2f\xcb\xce\x78\x9f\x68\xd4\x26\x49\x9a\x30\x01\x2e\xa3\x32\x6a\x9e\x9a\xd6\x50\x6a\xfe\x7c\x43\x5c\x1d\x6d\xc7\x5d\xd6\x7c\x88\xfd\xc0\xf8\x05\x9a\x67\x98\xc7\xe7\x94\x14\xdd\xde\x1d\x77\x63\x87\x33\x96\x85\xfe\x01\x00\x00\xff\xff\x5a\xb5\xca\xce\x88\x00\x00\x00")

func routerProxyRouterProxyConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyConfigmapYaml,
		"router-proxy/router-proxy-configmap.yaml",
	)
}

func routerProxyRouterProxyConfigmapYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-configmap.yaml", size: 136, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x23, 0xe0, 0x90, 0x8a, 0x2f, 0x35, 0xc6, 0x8d, 0xdd, 0x12, 0xff, 0x63, 0x7f, 0xd0, 0xa9, 0x4a, 0xf5, 0x2f, 0x20, 0x8e, 0x50, 0xbd, 0xd8, 0x56, 0xcb, 0x4f, 0x14, 0x57, 0x93, 0x1c, 0x0}}
	return a, nil
}

var _routerProxyRouterProxyDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\xdb\x46\x10\xbe\xeb\x57\x4c\xd4\x00\x69\x0f\x34\x6d\x24\x87\x80\x45\x0a\xb8\xb6\x52\x08\xa9\x65\xc1\x8d\xd3\x4b\x01\x63\xb5\x1c\x91\x5b\x2f\x77\xb7\xbb\x43\xda\x84\xaa\xff\x5e\xac\xf9\x30\x9f\x4e\x8a\xf0\x24\xee\xcc\xf7\xed\x3c\xbe\x19\xea\x5e\xa8\x38\x82\x4b\x34\x52\x97\x19\x2a\x5a\x30\x23\xbe\xa0\x75\x42\xab\x08\x98\x31\x2e\x2c\xce\x16\x19\x12\x8b\x19\xb1\x68\x01\xa0\x58\x86\x11\x58\x9d\x13\xda\xc0\x58\xfd\x58\x2e\x00\x24\xdb\xa1\x74\xde\x0c\x1e\x34\xb0\x3b\x83\xdc\xdb\x2c\x1a\x29\x38\x73\x11\x9c\x2d\x00\x1c\x59\x46\x98\x94\x15\x8a\x4a\x83\x11\xdc\x20\xb7\xc8\x08\xbd\x19\x25\x72\xd2\xb6\x32\x67\x8c\x78\xfa\x7b\xe7\x96\xa9\x7b\x00\x08\x33\x23\x19\x61\x0d\xea\x84\xed\x1f\xd9\xc3\x4f\x33\x00\x34\xd1\xfa\x47\x28\x41\x17\x5a\x11\x13\x0a\x6d\x8b\x0c\xea\x22\x38\xb4\x85\xe0\x18\x08\xd3\x52\x8a\x8c\x25\x18\xc1\xe1\x50\xfd\xfa\xa8\x2d\x2c\xb9\x14\x4b\x38\x1e\x5b\x1f\x54\xc5\x73\x0c\x0d\xd7\xa7\xdb\x5f\x57\x17\xd7\x9b\x8f\xeb\xdf\x5a\x13\x40\xc1\x64\x8e\x11\x84\x48\x3c\xd4\x06\x95\x4b\xc5\x9e\xc2\xfb\x7c\x87\x5c\xab\xbd\x48\x5a\x57\xae\xb3\x8c\xa9\xb8\x4b\x1b\xee\x84\x0a\x77\xcc\xa5\xcf\xe9\xda\xc4\x75\x3d\x02\xde\x79\xf9\x37\xe8\xdc\xfb\xc3\xab\x31\x1a\xe0\x21\x15\x12\xe1\x15\x68\x0e\x09\x52\x93\x3d\x04\x0a\xda\xd8\x02\xa1\x12\x8b\xce\x35\x55\x15\x8a\xd0\x2a\x26\x83\x18\xf7\x2c\x97\xf4\x33\xc4\xba\xc3\x08\x80\x3c\xd5\xb0\xfc\x93\x09\x12\x2a\x81\xbd\xb6\x40\x29\x42\x03\x83\x1a\x56\xd3\x01\x69\xd8\x21\xb0\x82\x09\xc9\x76\x12\x97\x3d\x2a\x27\x11\x0d\xbc\x3d\xed\x1c\xc6\x5a\x61\xe7\x15\x1f\x8d\xb6\x04\x37\xd7\xb7\x9f\x57\x37\x77\x7f\xac\x6e\xbe\xac\x2f\x56\x77\xeb\xed\x87\xe5\xeb\x1f\xbf\x23\x29\x08\x34\xfc\xed\xb4\x32\x8c\xd2\x0f\x6f\x0e\x70\xe2\x15\x74\xc2\x65\xee\x08\xed\x7a\x0b\xc7\x37\x3f\x75\x23\x75\x18\x43\x80\xb0\x74\xe1\x5f\xaf\x0f\xa3\x58\x8e\xe1\xe4\xe1\x12\xc2\xaa\xe5\x41\x23\xf1\x30\x65\x4f\x9a\x3d\xe1\xfb\x04\x7e\x69\xcc\xdd\xd3\xf6\xce\x42\xcb\x3c\xc3\x2b\x9d\x2b\x72\x63\xe5\x0d\x78\x3b\x91\x66\x1e\xb1\x65\x94\x46\xa3\xdb\x67\x58\x5e\x04\x8f\x30\x13\x42\xee\xe3\x7a\xba\x5f\x34\x52\x9f\x1b\xc7\xd1\x24\xc3\xcc\x40\xd6\x35\x0a\x2a\x40\x6f\x36\x27\x06\xa9\xf6\x9e\x1f\xa3\x7d\x77\xea\x72\x67\x43\xa9\x39\x93\x4f\xc1\xd7\xd8\xc9\xae\x78\x2d\xf6\x88\xda\xcc\xb6\xda\x52\x04\xef\xdf\xbd\x7b\xdb\xa9\x4b\x95\x63\x4a\x64\xdc\x0b\x98\xd3\xf7\xa7\x93\x98\xc5\xb3\xfa\x78\x6e\x05\x95\x7e\xab\xe1\x23\x45\x1d\x6f\x9b\xab\x73\x77\xeb\xd0\x46\x70\x76\x7a\x7a\xd6\xb1\x70\x66\xd8\x4e\x48\x41\x02\x5d\xd4\x1b\xba\xd8\x6a\xd3\x3f\x09\xe0\xea\xd3\xe6\xfa\x72\x70\xb6\x59\x7d\xbe\x3b\xbf\xbc\x5a\x6f\xfe\x97\x28\x67\x64\x31\x59\xe3\x81\x18\xbc\x6c\x0a\xa3\x02\x2e\x85\xff\xaa\x0d\xe4\xf0\x4f\xce\xca\x13\xa1\xc3\xb4\x34\x68\xab\xad\x5a\x03\x22\xaf\x6e\x37\x00\x6c\x73\x29\xb7\x5a\x0a\x5e\x46\x70\x2e\x1f\x58\xe9\x5e\xdc\xbc\x3e\x3e\xe7\x17\x68\xcd\x39\x2f\x9d\x60\x34\x19\xad\xe6\x0b\xa3\x9a\x99\xae\x72\x38\xf1\x6f\xad\xe7\x83\xb6\xf7\x42\x25\x97\xc2\x46\x7d\xcc\xb7\x74\xda\x58\x51\x08\x89\x09\xc6\x11\x90\xcd\xf1\xab\x4d\x99\x1a\x4a\x7f\x99\xf3\xdf\x6b\x1a\x29\xae\x30\x6a\x60\x99\xa7\x18\x75\xba\xa5\xe8\x59\xea\xc5\x7c\xce\xb9\xe7\xd9\x34\x3e\x8b\x6e\xdc\xa3\x8d\x30\xb7\xb4\xaa\xf3\x2b\xd6\x93\xee\x78\x89\xf4\xbb\x33\x23\x4d\xcc\x0c\x95\x4f\x6d\x38\x1c\x07\x9e\x13\xfb\xad\x2a\x4b\xd4\xfb\x1c\xf8\x93\x4d\xef\x0f\x85\x42\xf2\xfd\x0d\x58\x9c\x09\x15\x8c\x68\x82\x6f\x4e\xc0\x57\xf1\x49\x3c\x43\xa1\x4d\x17\x39\xf8\x4a\x7c\x33\xdc\x83\x5e\x0f\x35\xf0\x5f\x00\x00\x00\xff\xff\x71\x30\x58\x6e\x63\x0a\x00\x00")

func routerProxyRouterProxyDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyDeploymentYaml,
		"router-proxy/router-proxy-deployment.yaml",
	)
}

func routerProxyRouterProxyDeploymentYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-deployment.yaml", size: 2659, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x87, 0x1c, 0xd8, 0x44, 0xda, 0x47, 0x33, 0x83, 0xcd, 0x63, 0xe5, 0xbb, 0xf2, 0x93, 0x0, 0x69, 0xb1, 0x2a, 0x46, 0x56, 0x44, 0x50, 0x64, 0xd1, 0x86, 0x71, 0x2b, 0xd4, 0xdf, 0xa, 0x46}}
	return a, nil
}

var _routerProxyRouterProxyHttpServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\x85\x2e\x10\xf8\x7f\x57\xb4\xed\x05\x02\x2d\xdd\x0b\x47\xb4\xa6\x89\x25\xe4\x69\x68\x6f\x5f\xe2\x84\xee\xa4\x79\x6f\x98\x67\xa9\x13\xd3\x45\x63\x2d\x59\x93\x78\xb9\x69\xb4\x62\x95\x69\xfd\x4f\x8b\x42\x26\x81\x70\x22\xaa\xb2\x28\x53\xd8\x0b\x1a\xc3\x03\xf0\xd4\x5c\xf3\x46\xdc\x02\x6d\x3b\x86\x43\xea\x94\x68\x27\x4c\xa7\xbf\xfd\x09\x83\x65\x9b\x99\xae\xe7\xb1\x27\x90\xb8\x2b\xc6\x2e\x1d\x9d\xa6\xb3\x66\x58\x70\x17\xc4\xfd\x37\xe9\x61\xef\x4f\xfa\x06\x00\x00\xff\xff\x60\x85\x4c\xb1\xaf\x00\x00\x00")

func routerProxyRouterProxyHttpServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyHttpServiceYaml,
		"router-proxy/router-proxy-http-service.yaml",
	)
}

func routerProxyRouterProxyHttpServiceYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyHttpServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-http-service.yaml", size: 175, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x5e, 0xe1, 0x84, 0x10, 0x1e, 0x7c, 0x3d, 0xa0, 0x66, 0x3, 0x8a, 0xa4, 0xf9, 0xaf, 0x6a, 0x1c, 0xd, 0x98, 0x6e, 0x8f, 0x83, 0xd2, 0x86, 0xe8, 0x4a, 0xb4, 0x40, 0x56, 0xb5, 0xcd, 0x2d}}
	return a, nil
}

var _routerProxyRouterProxyHttpsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x31\x0e\xc2\x30\x0c\x45\xf7\x9c\xc2\x17\xe8\x80\xe8\xe4\x95\x0b\x54\x02\xb1\x5b\xa9\x05\x11\x6d\x6c\xd9\xa6\x82\xdb\xa3\x26\xc0\x66\xff\xf7\xbe\xfe\xa3\xd4\x19\xe1\xcc\xb6\x95\xcc\x89\xb4\x5c\xd9\xbc\x48\x45\xd8\x0e\x69\xe5\xa0\x99\x82\x30\x01\x54\x5a\x19\xc1\xe4\x19\x6c\xc3\x3d\x42\x3d\xb9\x72\xde\x91\x8a\x85\xef\xc7\xf0\xb5\x3a\x06\xe8\x08\x61\x1c\x8f\xfd\x33\x09\xc9\xb2\x20\x5c\x4e\x53\x4b\x82\xec\xc6\x31\x35\xeb\xd7\x72\x5e\x38\x87\x18\x36\x83\x54\xff\xb3\x6a\xf2\x7a\xa7\x4f\x00\x00\x00\xff\xff\x06\xdb\xc5\x11\xb3\x00\x00\x00")

func routerProxyRouterProxyHttpsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyHttpsServiceYaml,
		"router-proxy/router-proxy-https-service.yaml",
	)
}

func routerProxyRouterProxyHttpsServiceYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyHttpsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-https-service.yaml", size: 179, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x21, 0xd3, 0xf0, 0xfc, 0x2c, 0xc8, 0x37, 0x11, 0x98, 0x1, 0x47, 0x78, 0xf8, 0xca, 0x41, 0xd0, 0x37, 0x37, 0x2d, 0x78, 0x48, 0x9b, 0x46, 0xe7, 0x25, 0x60, 0x2e, 0x5c, 0x6c, 0x84, 0x83}}
	return a, nil
}

var _routerProxyRouterProxyVpnclientConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xb1\x0a\xc2\x30\x10\x87\xf1\xfd\x9e\xe2\x4f\xf7\x28\x82\xd3\xad\xce\xae\xee\x47\x72\xca\x61\x7b\x09\x31\x2d\x4a\xed\xbb\x8b\x4a\xa1\xeb\xc7\xc7\xef\x6e\x9e\x18\xa7\xec\x57\xbb\x9d\xa5\x90\x14\xbb\x68\x7d\x58\x76\xc6\x74\xa0\x41\x9b\x24\x69\xc2\x04\xb8\x0c\xca\xa8\x79\x6c\x5a\x43\xa9\xf9\xf9\x0a\x53\xf1\xd8\x9b\x7a\x0b\xf1\x27\xd0\xfa\xfe\xeb\xee\x5b\x19\xef\x40\xf3\x0c\xf3\xd8\x8f\x49\xd1\x6d\x85\xfd\x66\xec\x70\xc4\xb2\xd0\x27\x00\x00\xff\xff\x04\xcf\x51\x8a\x92\x00\x00\x00")

func routerProxyRouterProxyVpnclientConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyVpnclientConfigmapYaml,
		"router-proxy/router-proxy-vpnclient-configmap.yaml",
	)
}

func routerProxyRouterProxyVpnclientConfigmapYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyVpnclientConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-vpnclient-configmap.yaml", size: 146, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x1a, 0x86, 0xf2, 0x92, 0x39, 0x85, 0xc6, 0x12, 0xe2, 0xca, 0x4d, 0xff, 0x2f, 0xce, 0x6b, 0xab, 0x81, 0xbf, 0x81, 0x3d, 0xfd, 0x1b, 0xed, 0xf9, 0x92, 0xb9, 0x51, 0xf2, 0x6f, 0x3d, 0x40}}
	return a, nil
}

var _routerProxyRouterProxyVpnclientSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x0a\xc3\x30\x0c\x85\xe1\xdd\xa7\x10\xd9\x5d\xe8\xea\x6b\x14\xba\x0b\x47\x83\x71\x22\x0b\x59\x35\x35\x21\x77\x2f\xad\xd3\xa1\xd0\x21\xeb\xe3\xff\x78\x39\xf1\x1c\xe0\x46\x51\xc9\x1c\x4a\xba\x93\xd6\x54\x38\x40\xbb\xba\x95\x0c\x67\x34\x0c\x0e\x80\x71\xa5\x00\x5a\x1e\x46\xea\x45\xcb\xb3\xfb\x26\x1c\x97\x44\x6c\xbe\x0e\xfe\x6d\x6d\xa9\x97\xa8\x16\x60\xdb\x40\x72\x82\xa9\x08\x71\x13\xf6\x3f\x7c\xd8\x77\x38\xc1\xbe\x1f\x2c\x53\x3f\xc7\x32\xf5\x83\x45\xfc\x7f\x36\xf6\x4f\xf4\x0a\x00\x00\xff\xff\x75\x8d\x03\x63\xe5\x00\x00\x00")

func routerProxyRouterProxyVpnclientSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_routerProxyRouterProxyVpnclientSecretYaml,
		"router-proxy/router-proxy-vpnclient-secret.yaml",
	)
}

func routerProxyRouterProxyVpnclientSecretYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyVpnclientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-vpnclient-secret.yaml", size: 229, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x95, 0xe8, 0xb0, 0x4e, 0xf7, 0xe6, 0xa0, 0x9a, 0xfd, 0x27, 0xa2, 0x81, 0xf6, 0xf9, 0x7a, 0x42, 0xa0, 0x69, 0xc6, 0xed, 0xae, 0xa5, 0xbd, 0x32, 0x20, 0x80, 0x18, 0x54, 0xd3, 0xb, 0xdc}}
	return a, nil
}

var _userManifestsBootstrapperUserManifestTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xce\xcc\x4b\xb1\x52\x70\xce\xcf\x4b\xcb\x4c\xf7\x4d\x2c\xe0\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\xa8\xae\x56\xd0\x03\xb1\x14\x6a\x6b\xb9\x60\x32\x60\x5a\xa1\x46\x97\xab\xba\x5a\x21\x33\x2f\x39\xa7\x34\x25\xd5\x25\xb1\x24\x51\x41\x0f\x24\xa1\x60\x02\x52\x0a\x08\x00\x00\xff\xff\xbb\x3e\x02\xd9\x68\x00\x00\x00")

func userManifestsBootstrapperUserManifestTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_userManifestsBootstrapperUserManifestTemplateYaml,
		"user-manifests-bootstrapper/user-manifest-template.yaml",
	)
}

func userManifestsBootstrapperUserManifestTemplateYaml() (*asset, error) {
	bytes, err := userManifestsBootstrapperUserManifestTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user-manifests-bootstrapper/user-manifest-template.yaml", size: 104, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x83, 0x2f, 0xb1, 0x52, 0x11, 0x49, 0x8, 0x3c, 0x7f, 0x1a, 0x9, 0xad, 0xc1, 0xeb, 0xf5, 0x94, 0xa8, 0xbc, 0x28, 0xa6, 0xb8, 0x73, 0x1e, 0xe, 0xea, 0x54, 0x78, 0x73, 0xd5, 0xc0, 0xca}}
	return a, nil
}

var _userManifestsBootstrapperUserManifestsBootstrapperPodYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\xb8\xb9\x01\xdc\x16\xa0\xe5\xbe\x0d\x1a\x5a\x60\xcd\x9a\x22\x18\x96\x04\x29\xd6\xc7\x15\x34\x75\xb2\x59\x53\x24\x77\x3c\x26\x71\x1d\xff\xf7\x81\x92\x2c\x4b\xa9\x9d\xa0\xc1\x30\x4c\x0f\x86\x79\x3c\x7d\xf7\xdd\xdd\xc7\x13\x85\x10\x23\xe9\xf5\x67\xa4\xa0\x9d\xcd\xe1\xe6\xcd\x68\xa5\x6d\x91\xc3\x27\xa4\x1b\xad\xf0\x57\xa5\x5c\xb4\x3c\xaa\x90\x65\x21\x59\xe6\x23\x00\x2b\x2b\xcc\x21\x06\x24\x51\x49\xab\x4b\x0c\x1c\xc4\xdc\x39\x0e\x4c\xd2\x7b\xa4\xd1\x43\x54\x9a\x4b\x35\x95\x91\x97\x8e\xf4\x37\xc9\xda\xd9\xe9\xea\xe7\x30\xd5\x2e\xeb\xe2\x5d\x3b\x83\xef\xb5\x2d\xb4\x5d\xfc\x60\x30\x72\x06\xaf\xb1\x4c\xce\xd2\xeb\x8f\xe4\xa2\x7f\x24\xe2\x08\xa0\x09\x78\x6a\x62\x60\xa4\x14\xb7\x0b\x83\x85\xe6\x51\x88\xf3\xaf\xa8\x38\x24\x40\x01\x07\xab\x01\xf0\x9c\x2a\x74\xb9\x5e\xb9\xe2\x40\x8e\x47\x50\x82\x47\x95\x9c\xd8\x19\xa4\x3a\x93\x9a\x59\xcd\x0d\xd7\x39\x8c\xab\x68\x58\x0b\xf9\x4d\xdc\x3a\x5a\x21\x8d\xeb\x4d\x00\xe7\x93\xbb\xa3\x1c\xc6\x1f\xfe\x8e\xd2\xec\xec\x37\xd2\x44\xcc\x61\xcc\x14\x71\x67\xc3\xb2\x44\xc5\x39\x5c\xb8\x4f\x6a\x89\x45\xac\x4b\xa2\xad\xe6\x53\x67\x59\x6a\x8b\xd4\xc5\xd4\x95\x5c\x60\x0e\x9b\x0d\x4c\xaf\xd1\xa0\x0c\x78\x9e\x2c\xb0\xdd\xb6\x58\xb5\xc3\x55\x34\xe6\xca\x19\xad\xd6\x39\x9c\x97\x17\x8e\xaf\x08\x03\xb6\x95\xdb\x25\xac\x9a\x0e\x88\x9b\xa6\x40\x62\xc7\xb8\x75\x4a\xe9\x68\xbb\xf8\x4d\x53\x0e\x19\x57\xbe\x35\x2b\x57\x55\xd2\x16\x79\xbb\x4c\x9c\xb2\xb9\xb6\xd9\x5c\x86\x65\x6b\x93\xb4\x08\xfd\x7d\xa1\x7a\x8b\x7b\xd1\x2d\x00\x54\xd1\x87\x4e\x4f\xb5\x2a\x34\x81\x8b\xec\x23\xf7\xcc\x59\x0c\x54\x87\x39\x46\x1a\x08\x6d\x81\x04\x42\x34\xef\x8a\x04\x93\xb0\xb3\x66\x0d\x42\x50\x53\x2f\x51\x57\xe8\x91\x0a\xa6\xe7\x05\x7c\xb8\x53\x26\x16\x08\xbc\x44\x38\xfd\x7c\x09\x05\x7a\xe3\xd6\x15\x5a\xee\x94\xd2\xf3\xa7\xaa\x1f\x2c\xeb\xb4\x94\xcd\x66\xb3\xd9\x97\xd9\xec\xcb\x31\xde\xaf\xf7\xb8\xd3\xb5\xac\x4c\xbf\x38\xfe\x08\xe6\x6b\xc8\x52\x73\x76\x82\x72\x26\x56\xf8\x47\x3a\x18\x83\xaa\x57\xc9\x72\x25\x79\x99\x0f\xdc\xf7\xfd\xef\x8c\x7d\x55\xd5\xff\xce\x1c\xc1\x78\xc7\x58\x39\x5b\xea\x45\x47\x78\xfc\x2c\xa9\x0d\x31\xfe\x07\x0a\xd3\x36\x89\xe2\x69\x9d\x3d\x60\xbe\x97\xd9\x6e\xa3\x51\x5b\xa9\x0d\xb6\x59\x82\x10\x32\x04\x64\x51\x87\xd8\xeb\xb0\x89\xb8\xdb\x3c\xac\xd2\xff\xbe\xfb\xea\x91\x09\xd3\xd7\x82\x7e\x56\xdf\x07\x93\xf4\x40\xd3\x7b\xcc\xfe\xd5\xae\xbf\xf8\xe9\xe1\xbb\xe9\x09\xc8\x20\x30\xf6\x2c\xa5\xa3\x9a\x29\x68\x0b\x27\x2f\x9d\x82\x05\x32\xa8\x0a\xee\x61\x41\xe8\x61\xf2\xd7\xe0\xfb\x22\x26\x70\x0f\xf2\x76\x05\x93\x0d\x78\xd2\x96\xe1\xe4\x0d\x6c\x27\xaf\x7e\x81\xc2\xf5\x40\xd3\xf0\xef\x90\x4e\x36\x09\x7f\x0b\xc2\xc1\xd7\xe0\xac\x97\xbc\x7c\x3b\xd9\xc0\x34\x7d\x7b\xea\x1f\xd8\x4e\xe0\x1d\x8c\x5b\xbf\x7a\x06\x8c\x7b\x60\x85\xb3\xd8\x5b\xe2\x9d\x77\xc4\xf0\xfb\x9f\xef\x3f\x9c\x5e\x5e\x9c\x9d\x7f\x7c\x9b\x21\xab\xcc\x79\xb4\x61\xa9\x4b\xce\x56\x71\x8e\x8d\x0e\x47\x03\x3a\xd2\x7b\xb3\x06\x51\xc2\xc9\x4b\x7f\x5b\xbc\x1a\x8c\xba\x6b\xf4\x46\xaa\x66\xd4\x2d\x8c\x9b\x4b\x03\x0a\x89\x43\x2b\xe8\x4a\x7a\x58\x22\x21\xcc\x51\xc9\x18\x10\x34\x4f\x02\xb0\x73\x60\x24\x2d\x10\xd8\x75\x01\x86\x31\x15\xa1\x64\xec\xa1\x08\x0b\x1d\xd3\x74\x80\x98\x9c\x31\x4d\x81\xe5\x02\xa9\xb7\xd9\xd0\x10\x4a\x82\x10\x25\xb9\xaa\x3d\x60\x52\xcc\xa3\x2d\x0c\x4e\x15\x71\x93\xb9\x5f\xe9\x4c\x49\xc1\x14\x03\x67\x78\xc7\x24\x15\x63\x91\x79\xac\x32\x36\x41\xec\xdf\xf0\x58\x81\x10\x05\xad\x05\x45\x9b\xda\x91\x2a\x0d\xef\xda\x43\xf6\x7d\xe0\x61\x2a\xd4\x96\xe8\xa9\x0c\x44\x79\x14\x30\x65\xe2\x48\xe1\x0f\x1c\xdc\x41\x6b\xbf\x3b\xc1\x07\x5b\x4d\x28\x8b\x4b\x6b\xd6\x39\xa4\x0b\xc6\x33\x06\x02\x61\x60\x49\xbc\x3b\xda\x97\xf6\x4c\x6a\x13\x29\x41\x85\xc1\x2d\xec\xe2\xc9\x0b\xd8\x2e\xc9\x6e\xb4\x1c\xe1\x1d\x50\x11\xf2\xbe\x08\xcd\xba\xc1\x6f\x63\x0a\x8b\x9c\x08\x0a\x59\x54\xda\x8a\x07\x10\xe2\xe1\x17\x0d\x00\x2b\xcf\xeb\x7a\xc8\x6c\xb6\xa3\x7f\x02\x00\x00\xff\xff\xc0\xdf\x87\x0b\x66\x0b\x00\x00")

func userManifestsBootstrapperUserManifestsBootstrapperPodYamlBytes() ([]byte, error) {
	return bindataRead(
		_userManifestsBootstrapperUserManifestsBootstrapperPodYaml,
		"user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml",
	)
}

func userManifestsBootstrapperUserManifestsBootstrapperPodYaml() (*asset, error) {
	bytes, err := userManifestsBootstrapperUserManifestsBootstrapperPodYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml", size: 2918, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xb3, 0x28, 0x16, 0x59, 0x69, 0x34, 0x21, 0xf4, 0x62, 0xf, 0xf2, 0x8c, 0xe7, 0x8b, 0x29, 0x34, 0x67, 0xfd, 0xea, 0x25, 0x57, 0xc3, 0x83, 0xcc, 0x20, 0x85, 0x5a, 0x5f, 0x2b, 0x76, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apiserver-haproxy/apiserver-ip.service":                                   apiserverHaproxyApiserverIpService,
	"apiserver-haproxy/haproxy.cfg":                                            apiserverHaproxyHaproxyCfg,
	"apiserver-haproxy/kube-apiserver-proxy.yaml":                              apiserverHaproxyKubeApiserverProxyYaml,
	"apiserver-haproxy/setup-apiserver-ip.sh":                                  apiserverHaproxySetupApiserverIpSh,
	"apiserver-haproxy/teardown-apiserver-ip.sh":                               apiserverHaproxyTeardownApiserverIpSh,
	"cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml":              clusterBootstrapClusterIngresscontrollers02ConfigYaml,
	"common/service-network-admin-kubeconfig-secret.yaml":                      commonServiceNetworkAdminKubeconfigSecretYaml,
	"control-plane-operator/cp-operator-configmap.yaml":                        controlPlaneOperatorCpOperatorConfigmapYaml,
	"etcd/etcd-cluster-crd.yaml":                                               etcdEtcdClusterCrdYaml,
	"etcd/etcd-cluster.yaml":                                                   etcdEtcdClusterYaml,
	"etcd/etcd-operator-cluster-role-binding.yaml":                             etcdEtcdOperatorClusterRoleBindingYaml,
	"etcd/etcd-operator-cluster-role.yaml":                                     etcdEtcdOperatorClusterRoleYaml,
	"etcd/etcd-operator.yaml":                                                  etcdEtcdOperatorYaml,
	"etcd/etcd-secret-template.yaml":                                           etcdEtcdSecretTemplateYaml,
	"hypershift-operator/hypershift-operator-configmap.yaml":                   hypershiftOperatorHypershiftOperatorConfigmapYaml,
	"ignition-configs/20-apiserver-haproxy.yaml":                               ignitionConfigs20ApiserverHaproxyYaml,
	"ignition-configs/99-worker-ssh.yaml":                                      ignitionConfigs99WorkerSshYaml,
	"kube-apiserver/client.conf":                                               kubeApiserverClientConf,
	"kube-apiserver/kube-apiserver-configmap.yaml":                             kubeApiserverKubeApiserverConfigmapYaml,
	"kube-apiserver/kube-apiserver-deployment-patch.yaml":                      kubeApiserverKubeApiserverDeploymentPatchYaml,
	"kube-apiserver/kube-apiserver-secret.yaml":                                kubeApiserverKubeApiserverSecretYaml,
	"kube-apiserver/kube-apiserver-vpnclient-config.yaml":                      kubeApiserverKubeApiserverVpnclientConfigYaml,
	"kube-apiserver/kube-apiserver-vpnclient-secret.yaml":                      kubeApiserverKubeApiserverVpnclientSecretYaml,
	"kube-controller-manager/kube-controller-manager-configmap.yaml":           kubeControllerManagerKubeControllerManagerConfigmapYaml,
	"kube-controller-manager/kube-controller-manager-secret.yaml":              kubeControllerManagerKubeControllerManagerSecretYaml,
	"kube-scheduler/kube-scheduler-secret.yaml":                                kubeSchedulerKubeSchedulerSecretYaml,
	"machine-config-server/cluster-infrastructure-02-config.yaml":              machineConfigServerClusterInfrastructure02ConfigYaml,
	"machine-config-server/cluster-network-02-config.yaml":                     machineConfigServerClusterNetwork02ConfigYaml,
	"machine-config-server/cluster-proxy-01-config.yaml":                       machineConfigServerClusterProxy01ConfigYaml,
	"machine-config-server/install-config.yaml":                                machineConfigServerInstallConfigYaml,
	"machine-config-server/machine-config-server-configmap.yaml":               machineConfigServerMachineConfigServerConfigmapYaml,
	"machine-config-server/machine-config-server-deployment.yaml":              machineConfigServerMachineConfigServerDeploymentYaml,
	"machine-config-server/machine-config-server-kubeconfig-secret.yaml":       machineConfigServerMachineConfigServerKubeconfigSecretYaml,
	"machine-config-server/machine-config-server-secret.yaml":                  machineConfigServerMachineConfigServerSecretYaml,
	"machine-config-server/machine-config-server-service.yaml":                 machineConfigServerMachineConfigServerServiceYaml,
	"machine-config-server/master.machineconfigpool.yaml":                      machineConfigServerMasterMachineconfigpoolYaml,
	"machine-config-server/pull-secret.yaml":                                   machineConfigServerPullSecretYaml,
	"machine-config-server/worker.machineconfigpool.yaml":                      machineConfigServerWorkerMachineconfigpoolYaml,
	"oauth-openshift/ingress-certs-secret.yaml":                                oauthOpenshiftIngressCertsSecretYaml,
	"oauth-openshift/oauth-server-configmap.yaml":                              oauthOpenshiftOauthServerConfigmapYaml,
	"oauth-openshift/oauth-server-secret.yaml":                                 oauthOpenshiftOauthServerSecretYaml,
	"openshift-apiserver/openshift-apiserver-configmap.yaml":                   openshiftApiserverOpenshiftApiserverConfigmapYaml,
	"openshift-apiserver/openshift-apiserver-secret.yaml":                      openshiftApiserverOpenshiftApiserverSecretYaml,
	"openshift-controller-manager/openshift-controller-manager-configmap.yaml": openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml,
	"openshift-controller-manager/openshift-controller-manager-secret.yaml":    openshiftControllerManagerOpenshiftControllerManagerSecretYaml,
	"openvpn/Dockerfile":                                                       openvpnDockerfile,
	"openvpn/client.conf":                                                      openvpnClientConf,
	"openvpn/openvpn-ccd-configmap.yaml":                                       openvpnOpenvpnCcdConfigmapYaml,
	"openvpn/openvpn-client-configmap.yaml":                                    openvpnOpenvpnClientConfigmapYaml,
	"openvpn/openvpn-client-deployment.yaml":                                   openvpnOpenvpnClientDeploymentYaml,
	"openvpn/openvpn-client-secret.yaml":                                       openvpnOpenvpnClientSecretYaml,
	"openvpn/openvpn-server-configmap.yaml":                                    openvpnOpenvpnServerConfigmapYaml,
	"openvpn/openvpn-server-deployment.yaml":                                   openvpnOpenvpnServerDeploymentYaml,
	"openvpn/openvpn-server-secret.yaml":                                       openvpnOpenvpnServerSecretYaml,
	"openvpn/openvpn-server-service.yaml":                                      openvpnOpenvpnServerServiceYaml,
	"openvpn/openvpn-serviceaccount.yaml":                                      openvpnOpenvpnServiceaccountYaml,
	"openvpn/server.conf":                                                      openvpnServerConf,
	"openvpn/worker":                                                           openvpnWorker,
	"registry/cluster-imageregistry-config.yaml":                               registryClusterImageregistryConfigYaml,
	"router-proxy/client.conf":                                                 routerProxyClientConf,
	"router-proxy/haproxy.cfg":                                                 routerProxyHaproxyCfg,
	"router-proxy/router-proxy-configmap.yaml":                                 routerProxyRouterProxyConfigmapYaml,
	"router-proxy/router-proxy-deployment.yaml":                                routerProxyRouterProxyDeploymentYaml,
	"router-proxy/router-proxy-http-service.yaml":                              routerProxyRouterProxyHttpServiceYaml,
	"router-proxy/router-proxy-https-service.yaml":                             routerProxyRouterProxyHttpsServiceYaml,
	"router-proxy/router-proxy-vpnclient-configmap.yaml":                       routerProxyRouterProxyVpnclientConfigmapYaml,
	"router-proxy/router-proxy-vpnclient-secret.yaml":                          routerProxyRouterProxyVpnclientSecretYaml,
	"user-manifests-bootstrapper/user-manifest-template.yaml":                  userManifestsBootstrapperUserManifestTemplateYaml,
	"user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml":         userManifestsBootstrapperUserManifestsBootstrapperPodYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apiserver-haproxy": {nil, map[string]*bintree{
		"apiserver-ip.service":      {apiserverHaproxyApiserverIpService, map[string]*bintree{}},
		"haproxy.cfg":               {apiserverHaproxyHaproxyCfg, map[string]*bintree{}},
		"kube-apiserver-proxy.yaml": {apiserverHaproxyKubeApiserverProxyYaml, map[string]*bintree{}},
		"setup-apiserver-ip.sh":     {apiserverHaproxySetupApiserverIpSh, map[string]*bintree{}},
		"teardown-apiserver-ip.sh":  {apiserverHaproxyTeardownApiserverIpSh, map[string]*bintree{}},
	}},
	"cluster-bootstrap": {nil, map[string]*bintree{
		"cluster-ingresscontrollers-02-config.yaml": {clusterBootstrapClusterIngresscontrollers02ConfigYaml, map[string]*bintree{}},
	}},
	"common": {nil, map[string]*bintree{
		"service-network-admin-kubeconfig-secret.yaml": {commonServiceNetworkAdminKubeconfigSecretYaml, map[string]*bintree{}},
	}},
	"control-plane-operator": {nil, map[string]*bintree{
		"cp-operator-configmap.yaml": {controlPlaneOperatorCpOperatorConfigmapYaml, map[string]*bintree{}},
	}},
	"etcd": {nil, map[string]*bintree{
		"etcd-cluster-crd.yaml":                   {etcdEtcdClusterCrdYaml, map[string]*bintree{}},
		"etcd-cluster.yaml":                       {etcdEtcdClusterYaml, map[string]*bintree{}},
		"etcd-operator-cluster-role-binding.yaml": {etcdEtcdOperatorClusterRoleBindingYaml, map[string]*bintree{}},
		"etcd-operator-cluster-role.yaml":         {etcdEtcdOperatorClusterRoleYaml, map[string]*bintree{}},
		"etcd-operator.yaml":                      {etcdEtcdOperatorYaml, map[string]*bintree{}},
		"etcd-secret-template.yaml":               {etcdEtcdSecretTemplateYaml, map[string]*bintree{}},
	}},
	"hypershift-operator": {nil, map[string]*bintree{
		"hypershift-operator-configmap.yaml": {hypershiftOperatorHypershiftOperatorConfigmapYaml, map[string]*bintree{}},
	}},
	"ignition-configs": {nil, map[string]*bintree{
		"20-apiserver-haproxy.yaml": {ignitionConfigs20ApiserverHaproxyYaml, map[string]*bintree{}},
		"99-worker-ssh.yaml":        {ignitionConfigs99WorkerSshYaml, map[string]*bintree{}},
	}},
	"kube-apiserver": {nil, map[string]*bintree{
		"client.conf":                          {kubeApiserverClientConf, map[string]*bintree{}},
		"kube-apiserver-configmap.yaml":        {kubeApiserverKubeApiserverConfigmapYaml, map[string]*bintree{}},
		"kube-apiserver-deployment-patch.yaml": {kubeApiserverKubeApiserverDeploymentPatchYaml, map[string]*bintree{}},
		"kube-apiserver-secret.yaml":           {kubeApiserverKubeApiserverSecretYaml, map[string]*bintree{}},
		"kube-apiserver-vpnclient-config.yaml": {kubeApiserverKubeApiserverVpnclientConfigYaml, map[string]*bintree{}},
		"kube-apiserver-vpnclient-secret.yaml": {kubeApiserverKubeApiserverVpnclientSecretYaml, map[string]*bintree{}},
	}},
	"kube-controller-manager": {nil, map[string]*bintree{
		"kube-controller-manager-configmap.yaml": {kubeControllerManagerKubeControllerManagerConfigmapYaml, map[string]*bintree{}},
		"kube-controller-manager-secret.yaml":    {kubeControllerManagerKubeControllerManagerSecretYaml, map[string]*bintree{}},
	}},
	"kube-scheduler": {nil, map[string]*bintree{
		"kube-scheduler-secret.yaml": {kubeSchedulerKubeSchedulerSecretYaml, map[string]*bintree{}},
	}},
	"machine-config-server": {nil, map[string]*bintree{
		"cluster-infrastructure-02-config.yaml":        {machineConfigServerClusterInfrastructure02ConfigYaml, map[string]*bintree{}},
		"cluster-network-02-config.yaml":               {machineConfigServerClusterNetwork02ConfigYaml, map[string]*bintree{}},
		"cluster-proxy-01-config.yaml":                 {machineConfigServerClusterProxy01ConfigYaml, map[string]*bintree{}},
		"install-config.yaml":                          {machineConfigServerInstallConfigYaml, map[string]*bintree{}},
		"machine-config-server-configmap.yaml":         {machineConfigServerMachineConfigServerConfigmapYaml, map[string]*bintree{}},
		"machine-config-server-deployment.yaml":        {machineConfigServerMachineConfigServerDeploymentYaml, map[string]*bintree{}},
		"machine-config-server-kubeconfig-secret.yaml": {machineConfigServerMachineConfigServerKubeconfigSecretYaml, map[string]*bintree{}},
		"machine-config-server-secret.yaml":            {machineConfigServerMachineConfigServerSecretYaml, map[string]*bintree{}},
		"machine-config-server-service.yaml":           {machineConfigServerMachineConfigServerServiceYaml, map[string]*bintree{}},
		"master.machineconfigpool.yaml":                {machineConfigServerMasterMachineconfigpoolYaml, map[string]*bintree{}},
		"pull-secret.yaml":                             {machineConfigServerPullSecretYaml, map[string]*bintree{}},
		"worker.machineconfigpool.yaml":                {machineConfigServerWorkerMachineconfigpoolYaml, map[string]*bintree{}},
	}},
	"oauth-openshift": {nil, map[string]*bintree{
		"ingress-certs-secret.yaml":   {oauthOpenshiftIngressCertsSecretYaml, map[string]*bintree{}},
		"oauth-server-configmap.yaml": {oauthOpenshiftOauthServerConfigmapYaml, map[string]*bintree{}},
		"oauth-server-secret.yaml":    {oauthOpenshiftOauthServerSecretYaml, map[string]*bintree{}},
	}},
	"openshift-apiserver": {nil, map[string]*bintree{
		"openshift-apiserver-configmap.yaml": {openshiftApiserverOpenshiftApiserverConfigmapYaml, map[string]*bintree{}},
		"openshift-apiserver-secret.yaml":    {openshiftApiserverOpenshiftApiserverSecretYaml, map[string]*bintree{}},
	}},
	"openshift-controller-manager": {nil, map[string]*bintree{
		"openshift-controller-manager-configmap.yaml": {openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml, map[string]*bintree{}},
		"openshift-controller-manager-secret.yaml":    {openshiftControllerManagerOpenshiftControllerManagerSecretYaml, map[string]*bintree{}},
	}},
	"openvpn": {nil, map[string]*bintree{
		"Dockerfile":                     {openvpnDockerfile, map[string]*bintree{}},
		"client.conf":                    {openvpnClientConf, map[string]*bintree{}},
		"openvpn-ccd-configmap.yaml":     {openvpnOpenvpnCcdConfigmapYaml, map[string]*bintree{}},
		"openvpn-client-configmap.yaml":  {openvpnOpenvpnClientConfigmapYaml, map[string]*bintree{}},
		"openvpn-client-deployment.yaml": {openvpnOpenvpnClientDeploymentYaml, map[string]*bintree{}},
		"openvpn-client-secret.yaml":     {openvpnOpenvpnClientSecretYaml, map[string]*bintree{}},
		"openvpn-server-configmap.yaml":  {openvpnOpenvpnServerConfigmapYaml, map[string]*bintree{}},
		"openvpn-server-deployment.yaml": {openvpnOpenvpnServerDeploymentYaml, map[string]*bintree{}},
		"openvpn-server-secret.yaml":     {openvpnOpenvpnServerSecretYaml, map[string]*bintree{}},
		"openvpn-server-service.yaml":    {openvpnOpenvpnServerServiceYaml, map[string]*bintree{}},
		"openvpn-serviceaccount.yaml":    {openvpnOpenvpnServiceaccountYaml, map[string]*bintree{}},
		"server.conf":                    {openvpnServerConf, map[string]*bintree{}},
		"worker":                         {openvpnWorker, map[string]*bintree{}},
	}},
	"registry": {nil, map[string]*bintree{
		"cluster-imageregistry-config.yaml": {registryClusterImageregistryConfigYaml, map[string]*bintree{}},
	}},
	"router-proxy": {nil, map[string]*bintree{
		"client.conf":                           {routerProxyClientConf, map[string]*bintree{}},
		"haproxy.cfg":                           {routerProxyHaproxyCfg, map[string]*bintree{}},
		"router-proxy-configmap.yaml":           {routerProxyRouterProxyConfigmapYaml, map[string]*bintree{}},
		"router-proxy-deployment.yaml":          {routerProxyRouterProxyDeploymentYaml, map[string]*bintree{}},
		"router-proxy-http-service.yaml":        {routerProxyRouterProxyHttpServiceYaml, map[string]*bintree{}},
		"router-proxy-https-service.yaml":       {routerProxyRouterProxyHttpsServiceYaml, map[string]*bintree{}},
		"router-proxy-vpnclient-configmap.yaml": {routerProxyRouterProxyVpnclientConfigmapYaml, map[string]*bintree{}},
		"router-proxy-vpnclient-secret.yaml":    {routerProxyRouterProxyVpnclientSecretYaml, map[string]*bintree{}},
	}},
	"user-manifests-bootstrapper": {nil, map[string]*bintree{
		"user-manifest-template.yaml":          {userManifestsBootstrapperUserManifestTemplateYaml, map[string]*bintree{}},
		"user-manifests-bootstrapper-pod.yaml": {userManifestsBootstrapperUserManifestsBootstrapperPodYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
